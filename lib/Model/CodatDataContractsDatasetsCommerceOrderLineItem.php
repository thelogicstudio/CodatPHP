<?php
/**
 * CodatDataContractsDatasetsCommerceOrderLineItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  TheLogicStudio\CodatPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Codat API
 *
 * [See our API changes](https://docs.codat.io/changelog)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TheLogicStudio\CodatPHP\Model;

use \ArrayAccess;
use \TheLogicStudio\CodatPHP\ObjectSerializer;

/**
 * CodatDataContractsDatasetsCommerceOrderLineItem Class Doc Comment
 *
 * @category Class
 * @package  TheLogicStudio\CodatPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CodatDataContractsDatasetsCommerceOrderLineItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Codat.DataContracts.Datasets.Commerce.OrderLineItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'quantity' => 'float',
        'tax_percentage' => 'float',
        'total_amount' => 'float',
        'total_tax_amount' => 'float',
        'unit_price' => 'float',
        'taxes' => '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceTaxComponentAllocation[]',
        'product_ref' => '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceProductRef',
        'product_variant_ref' => '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceProductRef',
        'discount_allocations' => '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceDiscountAllocation[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'quantity' => 'double',
        'tax_percentage' => 'double',
        'total_amount' => 'double',
        'total_tax_amount' => 'double',
        'unit_price' => 'double',
        'taxes' => null,
        'product_ref' => null,
        'product_variant_ref' => null,
        'discount_allocations' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'quantity' => false,
		'tax_percentage' => false,
		'total_amount' => false,
		'total_tax_amount' => false,
		'unit_price' => false,
		'taxes' => true,
		'product_ref' => false,
		'product_variant_ref' => false,
		'discount_allocations' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'quantity' => 'quantity',
        'tax_percentage' => 'taxPercentage',
        'total_amount' => 'totalAmount',
        'total_tax_amount' => 'totalTaxAmount',
        'unit_price' => 'unitPrice',
        'taxes' => 'taxes',
        'product_ref' => 'productRef',
        'product_variant_ref' => 'productVariantRef',
        'discount_allocations' => 'discountAllocations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'quantity' => 'setQuantity',
        'tax_percentage' => 'setTaxPercentage',
        'total_amount' => 'setTotalAmount',
        'total_tax_amount' => 'setTotalTaxAmount',
        'unit_price' => 'setUnitPrice',
        'taxes' => 'setTaxes',
        'product_ref' => 'setProductRef',
        'product_variant_ref' => 'setProductVariantRef',
        'discount_allocations' => 'setDiscountAllocations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'quantity' => 'getQuantity',
        'tax_percentage' => 'getTaxPercentage',
        'total_amount' => 'getTotalAmount',
        'total_tax_amount' => 'getTotalTaxAmount',
        'unit_price' => 'getUnitPrice',
        'taxes' => 'getTaxes',
        'product_ref' => 'getProductRef',
        'product_variant_ref' => 'getProductVariantRef',
        'discount_allocations' => 'getDiscountAllocations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('tax_percentage', $data ?? [], null);
        $this->setIfExists('total_amount', $data ?? [], null);
        $this->setIfExists('total_tax_amount', $data ?? [], null);
        $this->setIfExists('unit_price', $data ?? [], null);
        $this->setIfExists('taxes', $data ?? [], null);
        $this->setIfExists('product_ref', $data ?? [], null);
        $this->setIfExists('product_variant_ref', $data ?? [], null);
        $this->setIfExists('discount_allocations', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets tax_percentage
     *
     * @return float|null
     */
    public function getTaxPercentage()
    {
        return $this->container['tax_percentage'];
    }

    /**
     * Sets tax_percentage
     *
     * @param float|null $tax_percentage tax_percentage
     *
     * @return self
     */
    public function setTaxPercentage($tax_percentage)
    {
        if (is_null($tax_percentage)) {
            throw new \InvalidArgumentException('non-nullable tax_percentage cannot be null');
        }
        $this->container['tax_percentage'] = $tax_percentage;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return float|null
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param float|null $total_amount total_amount
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        if (is_null($total_amount)) {
            throw new \InvalidArgumentException('non-nullable total_amount cannot be null');
        }
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets total_tax_amount
     *
     * @return float|null
     */
    public function getTotalTaxAmount()
    {
        return $this->container['total_tax_amount'];
    }

    /**
     * Sets total_tax_amount
     *
     * @param float|null $total_tax_amount total_tax_amount
     *
     * @return self
     */
    public function setTotalTaxAmount($total_tax_amount)
    {
        if (is_null($total_tax_amount)) {
            throw new \InvalidArgumentException('non-nullable total_tax_amount cannot be null');
        }
        $this->container['total_tax_amount'] = $total_tax_amount;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return float|null
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param float|null $unit_price unit_price
     *
     * @return self
     */
    public function setUnitPrice($unit_price)
    {
        if (is_null($unit_price)) {
            throw new \InvalidArgumentException('non-nullable unit_price cannot be null');
        }
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets taxes
     *
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceTaxComponentAllocation[]|null
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     *
     * @param \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceTaxComponentAllocation[]|null $taxes taxes
     *
     * @return self
     */
    public function setTaxes($taxes)
    {
        if (is_null($taxes)) {
            array_push($this->openAPINullablesSetToNull, 'taxes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taxes'] = $taxes;

        return $this;
    }

    /**
     * Gets product_ref
     *
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceProductRef|null
     */
    public function getProductRef()
    {
        return $this->container['product_ref'];
    }

    /**
     * Sets product_ref
     *
     * @param \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceProductRef|null $product_ref product_ref
     *
     * @return self
     */
    public function setProductRef($product_ref)
    {
        if (is_null($product_ref)) {
            throw new \InvalidArgumentException('non-nullable product_ref cannot be null');
        }
        $this->container['product_ref'] = $product_ref;

        return $this;
    }

    /**
     * Gets product_variant_ref
     *
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceProductRef|null
     */
    public function getProductVariantRef()
    {
        return $this->container['product_variant_ref'];
    }

    /**
     * Sets product_variant_ref
     *
     * @param \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceProductRef|null $product_variant_ref product_variant_ref
     *
     * @return self
     */
    public function setProductVariantRef($product_variant_ref)
    {
        if (is_null($product_variant_ref)) {
            throw new \InvalidArgumentException('non-nullable product_variant_ref cannot be null');
        }
        $this->container['product_variant_ref'] = $product_variant_ref;

        return $this;
    }

    /**
     * Gets discount_allocations
     *
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceDiscountAllocation[]|null
     */
    public function getDiscountAllocations()
    {
        return $this->container['discount_allocations'];
    }

    /**
     * Sets discount_allocations
     *
     * @param \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceDiscountAllocation[]|null $discount_allocations discount_allocations
     *
     * @return self
     */
    public function setDiscountAllocations($discount_allocations)
    {
        if (is_null($discount_allocations)) {
            array_push($this->openAPINullablesSetToNull, 'discount_allocations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discount_allocations', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discount_allocations'] = $discount_allocations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


