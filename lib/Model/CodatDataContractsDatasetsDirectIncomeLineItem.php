<?php
/**
 * CodatDataContractsDatasetsDirectIncomeLineItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  TheLogicStudio\CodatPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Codat API
 *
 * [See our API changes](https://docs.codat.io/changelog)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TheLogicStudio\CodatPHP\Model;

use \ArrayAccess;
use \TheLogicStudio\CodatPHP\ObjectSerializer;

/**
 * CodatDataContractsDatasetsDirectIncomeLineItem Class Doc Comment
 *
 * @category Class
 * @package  TheLogicStudio\CodatPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CodatDataContractsDatasetsDirectIncomeLineItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Codat.DataContracts.Datasets.DirectIncomeLineItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'description' => 'string',
        'unit_amount' => 'float',
        'quantity' => 'float',
        'discount_amount' => 'float',
        'discount_percentage' => 'float',
        'sub_total' => 'float',
        'tax_amount' => 'float',
        'total_amount' => 'float',
        'account_ref' => '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAccountRef',
        'tax_rate_ref' => '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsTaxRateRef',
        'item_ref' => '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsItemRef',
        'tracking_category_refs' => '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsTrackingCategoryRef[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'description' => null,
        'unit_amount' => 'double',
        'quantity' => 'double',
        'discount_amount' => 'double',
        'discount_percentage' => 'double',
        'sub_total' => 'double',
        'tax_amount' => 'double',
        'total_amount' => 'double',
        'account_ref' => null,
        'tax_rate_ref' => null,
        'item_ref' => null,
        'tracking_category_refs' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'description' => true,
		'unit_amount' => false,
		'quantity' => false,
		'discount_amount' => true,
		'discount_percentage' => true,
		'sub_total' => true,
		'tax_amount' => true,
		'total_amount' => true,
		'account_ref' => false,
		'tax_rate_ref' => false,
		'item_ref' => false,
		'tracking_category_refs' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'unit_amount' => 'unitAmount',
        'quantity' => 'quantity',
        'discount_amount' => 'discountAmount',
        'discount_percentage' => 'discountPercentage',
        'sub_total' => 'subTotal',
        'tax_amount' => 'taxAmount',
        'total_amount' => 'totalAmount',
        'account_ref' => 'accountRef',
        'tax_rate_ref' => 'taxRateRef',
        'item_ref' => 'itemRef',
        'tracking_category_refs' => 'trackingCategoryRefs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'unit_amount' => 'setUnitAmount',
        'quantity' => 'setQuantity',
        'discount_amount' => 'setDiscountAmount',
        'discount_percentage' => 'setDiscountPercentage',
        'sub_total' => 'setSubTotal',
        'tax_amount' => 'setTaxAmount',
        'total_amount' => 'setTotalAmount',
        'account_ref' => 'setAccountRef',
        'tax_rate_ref' => 'setTaxRateRef',
        'item_ref' => 'setItemRef',
        'tracking_category_refs' => 'setTrackingCategoryRefs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'unit_amount' => 'getUnitAmount',
        'quantity' => 'getQuantity',
        'discount_amount' => 'getDiscountAmount',
        'discount_percentage' => 'getDiscountPercentage',
        'sub_total' => 'getSubTotal',
        'tax_amount' => 'getTaxAmount',
        'total_amount' => 'getTotalAmount',
        'account_ref' => 'getAccountRef',
        'tax_rate_ref' => 'getTaxRateRef',
        'item_ref' => 'getItemRef',
        'tracking_category_refs' => 'getTrackingCategoryRefs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('unit_amount', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('discount_amount', $data ?? [], null);
        $this->setIfExists('discount_percentage', $data ?? [], null);
        $this->setIfExists('sub_total', $data ?? [], null);
        $this->setIfExists('tax_amount', $data ?? [], null);
        $this->setIfExists('total_amount', $data ?? [], null);
        $this->setIfExists('account_ref', $data ?? [], null);
        $this->setIfExists('tax_rate_ref', $data ?? [], null);
        $this->setIfExists('item_ref', $data ?? [], null);
        $this->setIfExists('tracking_category_refs', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['unit_amount'] === null) {
            $invalidProperties[] = "'unit_amount' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets unit_amount
     *
     * @return float
     */
    public function getUnitAmount()
    {
        return $this->container['unit_amount'];
    }

    /**
     * Sets unit_amount
     *
     * @param float $unit_amount unit_amount
     *
     * @return self
     */
    public function setUnitAmount($unit_amount)
    {
        if (is_null($unit_amount)) {
            throw new \InvalidArgumentException('non-nullable unit_amount cannot be null');
        }
        $this->container['unit_amount'] = $unit_amount;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return float|null
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param float|null $discount_amount discount_amount
     *
     * @return self
     */
    public function setDiscountAmount($discount_amount)
    {
        if (is_null($discount_amount)) {
            array_push($this->openAPINullablesSetToNull, 'discount_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discount_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets discount_percentage
     *
     * @return float|null
     */
    public function getDiscountPercentage()
    {
        return $this->container['discount_percentage'];
    }

    /**
     * Sets discount_percentage
     *
     * @param float|null $discount_percentage discount_percentage
     *
     * @return self
     */
    public function setDiscountPercentage($discount_percentage)
    {
        if (is_null($discount_percentage)) {
            array_push($this->openAPINullablesSetToNull, 'discount_percentage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discount_percentage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discount_percentage'] = $discount_percentage;

        return $this;
    }

    /**
     * Gets sub_total
     *
     * @return float|null
     */
    public function getSubTotal()
    {
        return $this->container['sub_total'];
    }

    /**
     * Sets sub_total
     *
     * @param float|null $sub_total sub_total
     *
     * @return self
     */
    public function setSubTotal($sub_total)
    {
        if (is_null($sub_total)) {
            array_push($this->openAPINullablesSetToNull, 'sub_total');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sub_total', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sub_total'] = $sub_total;

        return $this;
    }

    /**
     * Gets tax_amount
     *
     * @return float|null
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param float|null $tax_amount tax_amount
     *
     * @return self
     */
    public function setTaxAmount($tax_amount)
    {
        if (is_null($tax_amount)) {
            array_push($this->openAPINullablesSetToNull, 'tax_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return float|null
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param float|null $total_amount total_amount
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        if (is_null($total_amount)) {
            array_push($this->openAPINullablesSetToNull, 'total_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets account_ref
     *
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAccountRef|null
     */
    public function getAccountRef()
    {
        return $this->container['account_ref'];
    }

    /**
     * Sets account_ref
     *
     * @param \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAccountRef|null $account_ref account_ref
     *
     * @return self
     */
    public function setAccountRef($account_ref)
    {
        if (is_null($account_ref)) {
            throw new \InvalidArgumentException('non-nullable account_ref cannot be null');
        }
        $this->container['account_ref'] = $account_ref;

        return $this;
    }

    /**
     * Gets tax_rate_ref
     *
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsTaxRateRef|null
     */
    public function getTaxRateRef()
    {
        return $this->container['tax_rate_ref'];
    }

    /**
     * Sets tax_rate_ref
     *
     * @param \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsTaxRateRef|null $tax_rate_ref tax_rate_ref
     *
     * @return self
     */
    public function setTaxRateRef($tax_rate_ref)
    {
        if (is_null($tax_rate_ref)) {
            throw new \InvalidArgumentException('non-nullable tax_rate_ref cannot be null');
        }
        $this->container['tax_rate_ref'] = $tax_rate_ref;

        return $this;
    }

    /**
     * Gets item_ref
     *
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsItemRef|null
     */
    public function getItemRef()
    {
        return $this->container['item_ref'];
    }

    /**
     * Sets item_ref
     *
     * @param \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsItemRef|null $item_ref item_ref
     *
     * @return self
     */
    public function setItemRef($item_ref)
    {
        if (is_null($item_ref)) {
            throw new \InvalidArgumentException('non-nullable item_ref cannot be null');
        }
        $this->container['item_ref'] = $item_ref;

        return $this;
    }

    /**
     * Gets tracking_category_refs
     *
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsTrackingCategoryRef[]|null
     */
    public function getTrackingCategoryRefs()
    {
        return $this->container['tracking_category_refs'];
    }

    /**
     * Sets tracking_category_refs
     *
     * @param \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsTrackingCategoryRef[]|null $tracking_category_refs tracking_category_refs
     *
     * @return self
     */
    public function setTrackingCategoryRefs($tracking_category_refs)
    {
        if (is_null($tracking_category_refs)) {
            array_push($this->openAPINullablesSetToNull, 'tracking_category_refs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tracking_category_refs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tracking_category_refs'] = $tracking_category_refs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


