<?php
/**
 * CodatDataContractsDatasetsCommerceOrder
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  TheLogicStudio\CodatPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Codat API
 *
 * [See our API changes](https://docs.codat.io/changelog)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TheLogicStudio\CodatPHP\Model;

use \ArrayAccess;
use \TheLogicStudio\CodatPHP\ObjectSerializer;

/**
 * CodatDataContractsDatasetsCommerceOrder Class Doc Comment
 *
 * @category Class
 * @package  TheLogicStudio\CodatPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CodatDataContractsDatasetsCommerceOrder implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Codat.DataContracts.Datasets.Commerce.Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'order_number' => 'string',
        'country' => 'string',
        'currency' => 'string',
        'created_date' => '\DateTime',
        'closed_date' => '\DateTime',
        'total_amount' => 'float',
        'total_refund' => 'float',
        'total_tax_amount' => 'float',
        'total_discount' => 'float',
        'total_gratuity' => 'float',
        'order_line_items' => '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceOrderLineItem[]',
        'payments' => '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommercePaymentRef[]',
        'service_charges' => '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceServiceCharge[]',
        'location_ref' => '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceLocationRef',
        'customer_ref' => '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceCustomerRef',
        'modified_date' => '\DateTime',
        'source_modified_date' => '\DateTime',
        'supplemental_data' => '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsDataInterfacesSupplementalData'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'order_number' => null,
        'country' => null,
        'currency' => null,
        'created_date' => 'date-time',
        'closed_date' => 'date-time',
        'total_amount' => 'double',
        'total_refund' => 'double',
        'total_tax_amount' => 'double',
        'total_discount' => 'double',
        'total_gratuity' => 'double',
        'order_line_items' => null,
        'payments' => null,
        'service_charges' => null,
        'location_ref' => null,
        'customer_ref' => null,
        'modified_date' => 'date-time',
        'source_modified_date' => 'date-time',
        'supplemental_data' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'order_number' => true,
		'country' => true,
		'currency' => true,
		'created_date' => false,
		'closed_date' => true,
		'total_amount' => false,
		'total_refund' => false,
		'total_tax_amount' => false,
		'total_discount' => false,
		'total_gratuity' => false,
		'order_line_items' => true,
		'payments' => true,
		'service_charges' => true,
		'location_ref' => false,
		'customer_ref' => false,
		'modified_date' => true,
		'source_modified_date' => true,
		'supplemental_data' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'order_number' => 'orderNumber',
        'country' => 'country',
        'currency' => 'currency',
        'created_date' => 'createdDate',
        'closed_date' => 'closedDate',
        'total_amount' => 'totalAmount',
        'total_refund' => 'totalRefund',
        'total_tax_amount' => 'totalTaxAmount',
        'total_discount' => 'totalDiscount',
        'total_gratuity' => 'totalGratuity',
        'order_line_items' => 'orderLineItems',
        'payments' => 'payments',
        'service_charges' => 'serviceCharges',
        'location_ref' => 'locationRef',
        'customer_ref' => 'customerRef',
        'modified_date' => 'modifiedDate',
        'source_modified_date' => 'sourceModifiedDate',
        'supplemental_data' => 'supplementalData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'order_number' => 'setOrderNumber',
        'country' => 'setCountry',
        'currency' => 'setCurrency',
        'created_date' => 'setCreatedDate',
        'closed_date' => 'setClosedDate',
        'total_amount' => 'setTotalAmount',
        'total_refund' => 'setTotalRefund',
        'total_tax_amount' => 'setTotalTaxAmount',
        'total_discount' => 'setTotalDiscount',
        'total_gratuity' => 'setTotalGratuity',
        'order_line_items' => 'setOrderLineItems',
        'payments' => 'setPayments',
        'service_charges' => 'setServiceCharges',
        'location_ref' => 'setLocationRef',
        'customer_ref' => 'setCustomerRef',
        'modified_date' => 'setModifiedDate',
        'source_modified_date' => 'setSourceModifiedDate',
        'supplemental_data' => 'setSupplementalData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'order_number' => 'getOrderNumber',
        'country' => 'getCountry',
        'currency' => 'getCurrency',
        'created_date' => 'getCreatedDate',
        'closed_date' => 'getClosedDate',
        'total_amount' => 'getTotalAmount',
        'total_refund' => 'getTotalRefund',
        'total_tax_amount' => 'getTotalTaxAmount',
        'total_discount' => 'getTotalDiscount',
        'total_gratuity' => 'getTotalGratuity',
        'order_line_items' => 'getOrderLineItems',
        'payments' => 'getPayments',
        'service_charges' => 'getServiceCharges',
        'location_ref' => 'getLocationRef',
        'customer_ref' => 'getCustomerRef',
        'modified_date' => 'getModifiedDate',
        'source_modified_date' => 'getSourceModifiedDate',
        'supplemental_data' => 'getSupplementalData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('order_number', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('closed_date', $data ?? [], null);
        $this->setIfExists('total_amount', $data ?? [], null);
        $this->setIfExists('total_refund', $data ?? [], null);
        $this->setIfExists('total_tax_amount', $data ?? [], null);
        $this->setIfExists('total_discount', $data ?? [], null);
        $this->setIfExists('total_gratuity', $data ?? [], null);
        $this->setIfExists('order_line_items', $data ?? [], null);
        $this->setIfExists('payments', $data ?? [], null);
        $this->setIfExists('service_charges', $data ?? [], null);
        $this->setIfExists('location_ref', $data ?? [], null);
        $this->setIfExists('customer_ref', $data ?? [], null);
        $this->setIfExists('modified_date', $data ?? [], null);
        $this->setIfExists('source_modified_date', $data ?? [], null);
        $this->setIfExists('supplemental_data', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return string|null
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string|null $order_number order_number
     *
     * @return self
     */
    public function setOrderNumber($order_number)
    {
        if (is_null($order_number)) {
            array_push($this->openAPINullablesSetToNull, 'order_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            array_push($this->openAPINullablesSetToNull, 'country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            array_push($this->openAPINullablesSetToNull, 'currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets closed_date
     *
     * @return \DateTime|null
     */
    public function getClosedDate()
    {
        return $this->container['closed_date'];
    }

    /**
     * Sets closed_date
     *
     * @param \DateTime|null $closed_date closed_date
     *
     * @return self
     */
    public function setClosedDate($closed_date)
    {
        if (is_null($closed_date)) {
            array_push($this->openAPINullablesSetToNull, 'closed_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('closed_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['closed_date'] = $closed_date;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return float|null
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param float|null $total_amount total_amount
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        if (is_null($total_amount)) {
            throw new \InvalidArgumentException('non-nullable total_amount cannot be null');
        }
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets total_refund
     *
     * @return float|null
     */
    public function getTotalRefund()
    {
        return $this->container['total_refund'];
    }

    /**
     * Sets total_refund
     *
     * @param float|null $total_refund total_refund
     *
     * @return self
     */
    public function setTotalRefund($total_refund)
    {
        if (is_null($total_refund)) {
            throw new \InvalidArgumentException('non-nullable total_refund cannot be null');
        }
        $this->container['total_refund'] = $total_refund;

        return $this;
    }

    /**
     * Gets total_tax_amount
     *
     * @return float|null
     */
    public function getTotalTaxAmount()
    {
        return $this->container['total_tax_amount'];
    }

    /**
     * Sets total_tax_amount
     *
     * @param float|null $total_tax_amount total_tax_amount
     *
     * @return self
     */
    public function setTotalTaxAmount($total_tax_amount)
    {
        if (is_null($total_tax_amount)) {
            throw new \InvalidArgumentException('non-nullable total_tax_amount cannot be null');
        }
        $this->container['total_tax_amount'] = $total_tax_amount;

        return $this;
    }

    /**
     * Gets total_discount
     *
     * @return float|null
     */
    public function getTotalDiscount()
    {
        return $this->container['total_discount'];
    }

    /**
     * Sets total_discount
     *
     * @param float|null $total_discount total_discount
     *
     * @return self
     */
    public function setTotalDiscount($total_discount)
    {
        if (is_null($total_discount)) {
            throw new \InvalidArgumentException('non-nullable total_discount cannot be null');
        }
        $this->container['total_discount'] = $total_discount;

        return $this;
    }

    /**
     * Gets total_gratuity
     *
     * @return float|null
     */
    public function getTotalGratuity()
    {
        return $this->container['total_gratuity'];
    }

    /**
     * Sets total_gratuity
     *
     * @param float|null $total_gratuity total_gratuity
     *
     * @return self
     */
    public function setTotalGratuity($total_gratuity)
    {
        if (is_null($total_gratuity)) {
            throw new \InvalidArgumentException('non-nullable total_gratuity cannot be null');
        }
        $this->container['total_gratuity'] = $total_gratuity;

        return $this;
    }

    /**
     * Gets order_line_items
     *
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceOrderLineItem[]|null
     */
    public function getOrderLineItems()
    {
        return $this->container['order_line_items'];
    }

    /**
     * Sets order_line_items
     *
     * @param \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceOrderLineItem[]|null $order_line_items order_line_items
     *
     * @return self
     */
    public function setOrderLineItems($order_line_items)
    {
        if (is_null($order_line_items)) {
            array_push($this->openAPINullablesSetToNull, 'order_line_items');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_line_items', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order_line_items'] = $order_line_items;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommercePaymentRef[]|null
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommercePaymentRef[]|null $payments payments
     *
     * @return self
     */
    public function setPayments($payments)
    {
        if (is_null($payments)) {
            array_push($this->openAPINullablesSetToNull, 'payments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets service_charges
     *
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceServiceCharge[]|null
     */
    public function getServiceCharges()
    {
        return $this->container['service_charges'];
    }

    /**
     * Sets service_charges
     *
     * @param \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceServiceCharge[]|null $service_charges service_charges
     *
     * @return self
     */
    public function setServiceCharges($service_charges)
    {
        if (is_null($service_charges)) {
            array_push($this->openAPINullablesSetToNull, 'service_charges');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('service_charges', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['service_charges'] = $service_charges;

        return $this;
    }

    /**
     * Gets location_ref
     *
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceLocationRef|null
     */
    public function getLocationRef()
    {
        return $this->container['location_ref'];
    }

    /**
     * Sets location_ref
     *
     * @param \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceLocationRef|null $location_ref location_ref
     *
     * @return self
     */
    public function setLocationRef($location_ref)
    {
        if (is_null($location_ref)) {
            throw new \InvalidArgumentException('non-nullable location_ref cannot be null');
        }
        $this->container['location_ref'] = $location_ref;

        return $this;
    }

    /**
     * Gets customer_ref
     *
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceCustomerRef|null
     */
    public function getCustomerRef()
    {
        return $this->container['customer_ref'];
    }

    /**
     * Sets customer_ref
     *
     * @param \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceCustomerRef|null $customer_ref customer_ref
     *
     * @return self
     */
    public function setCustomerRef($customer_ref)
    {
        if (is_null($customer_ref)) {
            throw new \InvalidArgumentException('non-nullable customer_ref cannot be null');
        }
        $this->container['customer_ref'] = $customer_ref;

        return $this;
    }

    /**
     * Gets modified_date
     *
     * @return \DateTime|null
     */
    public function getModifiedDate()
    {
        return $this->container['modified_date'];
    }

    /**
     * Sets modified_date
     *
     * @param \DateTime|null $modified_date modified_date
     *
     * @return self
     */
    public function setModifiedDate($modified_date)
    {
        if (is_null($modified_date)) {
            array_push($this->openAPINullablesSetToNull, 'modified_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('modified_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['modified_date'] = $modified_date;

        return $this;
    }

    /**
     * Gets source_modified_date
     *
     * @return \DateTime|null
     */
    public function getSourceModifiedDate()
    {
        return $this->container['source_modified_date'];
    }

    /**
     * Sets source_modified_date
     *
     * @param \DateTime|null $source_modified_date source_modified_date
     *
     * @return self
     */
    public function setSourceModifiedDate($source_modified_date)
    {
        if (is_null($source_modified_date)) {
            array_push($this->openAPINullablesSetToNull, 'source_modified_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('source_modified_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['source_modified_date'] = $source_modified_date;

        return $this;
    }

    /**
     * Gets supplemental_data
     *
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsDataInterfacesSupplementalData|null
     */
    public function getSupplementalData()
    {
        return $this->container['supplemental_data'];
    }

    /**
     * Sets supplemental_data
     *
     * @param \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsDataInterfacesSupplementalData|null $supplemental_data supplemental_data
     *
     * @return self
     */
    public function setSupplementalData($supplemental_data)
    {
        if (is_null($supplemental_data)) {
            throw new \InvalidArgumentException('non-nullable supplemental_data cannot be null');
        }
        $this->container['supplemental_data'] = $supplemental_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


