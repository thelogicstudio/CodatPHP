<?php
/**
 * CodatDataContractsDatasetsCommerceProduct
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  TheLogicStudio\CodatPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Codat API
 *
 * [See our API changes](https://docs.codat.io/changelog)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TheLogicStudio\CodatPHP\Model;

use \ArrayAccess;
use \TheLogicStudio\CodatPHP\ObjectSerializer;

/**
 * CodatDataContractsDatasetsCommerceProduct Class Doc Comment
 *
 * @category Class
 * @package  TheLogicStudio\CodatPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CodatDataContractsDatasetsCommerceProduct implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Codat.DataContracts.Datasets.Commerce.Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'categorization' => 'string',
        'name' => 'string',
        'description' => 'string',
        'product_category_refs' => '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceProductCategoryRef[]',
        'is_gift_card' => 'bool',
        'variants' => '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceProductVariant[]',
        'created_date' => '\DateTime',
        'modified_date' => '\DateTime',
        'source_modified_date' => '\DateTime',
        'status' => '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceProductStatus',
        'supplemental_data' => '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsDataInterfacesSupplementalData'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'categorization' => null,
        'name' => null,
        'description' => null,
        'product_category_refs' => null,
        'is_gift_card' => null,
        'variants' => null,
        'created_date' => 'date-time',
        'modified_date' => 'date-time',
        'source_modified_date' => 'date-time',
        'status' => null,
        'supplemental_data' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'categorization' => true,
		'name' => true,
		'description' => true,
		'product_category_refs' => true,
		'is_gift_card' => false,
		'variants' => true,
		'created_date' => false,
		'modified_date' => true,
		'source_modified_date' => true,
		'status' => false,
		'supplemental_data' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'categorization' => 'categorization',
        'name' => 'name',
        'description' => 'description',
        'product_category_refs' => 'productCategoryRefs',
        'is_gift_card' => 'isGiftCard',
        'variants' => 'variants',
        'created_date' => 'createdDate',
        'modified_date' => 'modifiedDate',
        'source_modified_date' => 'sourceModifiedDate',
        'status' => 'status',
        'supplemental_data' => 'supplementalData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'categorization' => 'setCategorization',
        'name' => 'setName',
        'description' => 'setDescription',
        'product_category_refs' => 'setProductCategoryRefs',
        'is_gift_card' => 'setIsGiftCard',
        'variants' => 'setVariants',
        'created_date' => 'setCreatedDate',
        'modified_date' => 'setModifiedDate',
        'source_modified_date' => 'setSourceModifiedDate',
        'status' => 'setStatus',
        'supplemental_data' => 'setSupplementalData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'categorization' => 'getCategorization',
        'name' => 'getName',
        'description' => 'getDescription',
        'product_category_refs' => 'getProductCategoryRefs',
        'is_gift_card' => 'getIsGiftCard',
        'variants' => 'getVariants',
        'created_date' => 'getCreatedDate',
        'modified_date' => 'getModifiedDate',
        'source_modified_date' => 'getSourceModifiedDate',
        'status' => 'getStatus',
        'supplemental_data' => 'getSupplementalData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('categorization', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('product_category_refs', $data ?? [], null);
        $this->setIfExists('is_gift_card', $data ?? [], null);
        $this->setIfExists('variants', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('modified_date', $data ?? [], null);
        $this->setIfExists('source_modified_date', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('supplemental_data', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets categorization
     *
     * @return string|null
     */
    public function getCategorization()
    {
        return $this->container['categorization'];
    }

    /**
     * Sets categorization
     *
     * @param string|null $categorization categorization
     *
     * @return self
     */
    public function setCategorization($categorization)
    {
        if (is_null($categorization)) {
            array_push($this->openAPINullablesSetToNull, 'categorization');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('categorization', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['categorization'] = $categorization;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets product_category_refs
     *
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceProductCategoryRef[]|null
     */
    public function getProductCategoryRefs()
    {
        return $this->container['product_category_refs'];
    }

    /**
     * Sets product_category_refs
     *
     * @param \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceProductCategoryRef[]|null $product_category_refs product_category_refs
     *
     * @return self
     */
    public function setProductCategoryRefs($product_category_refs)
    {
        if (is_null($product_category_refs)) {
            array_push($this->openAPINullablesSetToNull, 'product_category_refs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_category_refs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_category_refs'] = $product_category_refs;

        return $this;
    }

    /**
     * Gets is_gift_card
     *
     * @return bool|null
     */
    public function getIsGiftCard()
    {
        return $this->container['is_gift_card'];
    }

    /**
     * Sets is_gift_card
     *
     * @param bool|null $is_gift_card is_gift_card
     *
     * @return self
     */
    public function setIsGiftCard($is_gift_card)
    {
        if (is_null($is_gift_card)) {
            throw new \InvalidArgumentException('non-nullable is_gift_card cannot be null');
        }
        $this->container['is_gift_card'] = $is_gift_card;

        return $this;
    }

    /**
     * Gets variants
     *
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceProductVariant[]|null
     */
    public function getVariants()
    {
        return $this->container['variants'];
    }

    /**
     * Sets variants
     *
     * @param \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceProductVariant[]|null $variants variants
     *
     * @return self
     */
    public function setVariants($variants)
    {
        if (is_null($variants)) {
            array_push($this->openAPINullablesSetToNull, 'variants');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('variants', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['variants'] = $variants;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets modified_date
     *
     * @return \DateTime|null
     */
    public function getModifiedDate()
    {
        return $this->container['modified_date'];
    }

    /**
     * Sets modified_date
     *
     * @param \DateTime|null $modified_date modified_date
     *
     * @return self
     */
    public function setModifiedDate($modified_date)
    {
        if (is_null($modified_date)) {
            array_push($this->openAPINullablesSetToNull, 'modified_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('modified_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['modified_date'] = $modified_date;

        return $this;
    }

    /**
     * Gets source_modified_date
     *
     * @return \DateTime|null
     */
    public function getSourceModifiedDate()
    {
        return $this->container['source_modified_date'];
    }

    /**
     * Sets source_modified_date
     *
     * @param \DateTime|null $source_modified_date source_modified_date
     *
     * @return self
     */
    public function setSourceModifiedDate($source_modified_date)
    {
        if (is_null($source_modified_date)) {
            array_push($this->openAPINullablesSetToNull, 'source_modified_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('source_modified_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['source_modified_date'] = $source_modified_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceProductStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsCommerceProductStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets supplemental_data
     *
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsDataInterfacesSupplementalData|null
     */
    public function getSupplementalData()
    {
        return $this->container['supplemental_data'];
    }

    /**
     * Sets supplemental_data
     *
     * @param \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsDataInterfacesSupplementalData|null $supplemental_data supplemental_data
     *
     * @return self
     */
    public function setSupplementalData($supplemental_data)
    {
        if (is_null($supplemental_data)) {
            throw new \InvalidArgumentException('non-nullable supplemental_data cannot be null');
        }
        $this->container['supplemental_data'] = $supplemental_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


