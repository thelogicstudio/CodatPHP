<?php
/**
 * CodatDataContractsDatasetsProfitAndLossReport
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  TheLogicStudio\CodatPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Codat API
 *
 * [See our API changes](https://docs.codat.io/changelog)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TheLogicStudio\CodatPHP\Model;

use \ArrayAccess;
use \TheLogicStudio\CodatPHP\ObjectSerializer;

/**
 * CodatDataContractsDatasetsProfitAndLossReport Class Doc Comment
 *
 * @category Class
 * @package  TheLogicStudio\CodatPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CodatDataContractsDatasetsProfitAndLossReport implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Codat.DataContracts.Datasets.ProfitAndLossReport';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'from_date' => '\DateTime',
        'to_date' => '\DateTime',
        'income' => '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsReportLine',
        'cost_of_sales' => '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsReportLine',
        'gross_profit' => 'float',
        'expenses' => '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsReportLine',
        'net_operating_profit' => 'float',
        'other_expenses' => '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsReportLine',
        'other_income' => '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsReportLine',
        'net_other_income' => 'float',
        'net_profit' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'from_date' => 'date-time',
        'to_date' => 'date-time',
        'income' => null,
        'cost_of_sales' => null,
        'gross_profit' => 'double',
        'expenses' => null,
        'net_operating_profit' => 'double',
        'other_expenses' => null,
        'other_income' => null,
        'net_other_income' => 'double',
        'net_profit' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'from_date' => false,
		'to_date' => false,
		'income' => false,
		'cost_of_sales' => false,
		'gross_profit' => false,
		'expenses' => false,
		'net_operating_profit' => false,
		'other_expenses' => false,
		'other_income' => false,
		'net_other_income' => false,
		'net_profit' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'from_date' => 'fromDate',
        'to_date' => 'toDate',
        'income' => 'income',
        'cost_of_sales' => 'costOfSales',
        'gross_profit' => 'grossProfit',
        'expenses' => 'expenses',
        'net_operating_profit' => 'netOperatingProfit',
        'other_expenses' => 'otherExpenses',
        'other_income' => 'otherIncome',
        'net_other_income' => 'netOtherIncome',
        'net_profit' => 'netProfit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'from_date' => 'setFromDate',
        'to_date' => 'setToDate',
        'income' => 'setIncome',
        'cost_of_sales' => 'setCostOfSales',
        'gross_profit' => 'setGrossProfit',
        'expenses' => 'setExpenses',
        'net_operating_profit' => 'setNetOperatingProfit',
        'other_expenses' => 'setOtherExpenses',
        'other_income' => 'setOtherIncome',
        'net_other_income' => 'setNetOtherIncome',
        'net_profit' => 'setNetProfit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'from_date' => 'getFromDate',
        'to_date' => 'getToDate',
        'income' => 'getIncome',
        'cost_of_sales' => 'getCostOfSales',
        'gross_profit' => 'getGrossProfit',
        'expenses' => 'getExpenses',
        'net_operating_profit' => 'getNetOperatingProfit',
        'other_expenses' => 'getOtherExpenses',
        'other_income' => 'getOtherIncome',
        'net_other_income' => 'getNetOtherIncome',
        'net_profit' => 'getNetProfit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('from_date', $data ?? [], null);
        $this->setIfExists('to_date', $data ?? [], null);
        $this->setIfExists('income', $data ?? [], null);
        $this->setIfExists('cost_of_sales', $data ?? [], null);
        $this->setIfExists('gross_profit', $data ?? [], null);
        $this->setIfExists('expenses', $data ?? [], null);
        $this->setIfExists('net_operating_profit', $data ?? [], null);
        $this->setIfExists('other_expenses', $data ?? [], null);
        $this->setIfExists('other_income', $data ?? [], null);
        $this->setIfExists('net_other_income', $data ?? [], null);
        $this->setIfExists('net_profit', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['gross_profit'] === null) {
            $invalidProperties[] = "'gross_profit' can't be null";
        }
        if ($this->container['net_operating_profit'] === null) {
            $invalidProperties[] = "'net_operating_profit' can't be null";
        }
        if ($this->container['net_other_income'] === null) {
            $invalidProperties[] = "'net_other_income' can't be null";
        }
        if ($this->container['net_profit'] === null) {
            $invalidProperties[] = "'net_profit' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets from_date
     *
     * @return \DateTime|null
     */
    public function getFromDate()
    {
        return $this->container['from_date'];
    }

    /**
     * Sets from_date
     *
     * @param \DateTime|null $from_date from_date
     *
     * @return self
     */
    public function setFromDate($from_date)
    {
        if (is_null($from_date)) {
            throw new \InvalidArgumentException('non-nullable from_date cannot be null');
        }
        $this->container['from_date'] = $from_date;

        return $this;
    }

    /**
     * Gets to_date
     *
     * @return \DateTime|null
     */
    public function getToDate()
    {
        return $this->container['to_date'];
    }

    /**
     * Sets to_date
     *
     * @param \DateTime|null $to_date to_date
     *
     * @return self
     */
    public function setToDate($to_date)
    {
        if (is_null($to_date)) {
            throw new \InvalidArgumentException('non-nullable to_date cannot be null');
        }
        $this->container['to_date'] = $to_date;

        return $this;
    }

    /**
     * Gets income
     *
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsReportLine|null
     */
    public function getIncome()
    {
        return $this->container['income'];
    }

    /**
     * Sets income
     *
     * @param \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsReportLine|null $income income
     *
     * @return self
     */
    public function setIncome($income)
    {
        if (is_null($income)) {
            throw new \InvalidArgumentException('non-nullable income cannot be null');
        }
        $this->container['income'] = $income;

        return $this;
    }

    /**
     * Gets cost_of_sales
     *
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsReportLine|null
     */
    public function getCostOfSales()
    {
        return $this->container['cost_of_sales'];
    }

    /**
     * Sets cost_of_sales
     *
     * @param \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsReportLine|null $cost_of_sales cost_of_sales
     *
     * @return self
     */
    public function setCostOfSales($cost_of_sales)
    {
        if (is_null($cost_of_sales)) {
            throw new \InvalidArgumentException('non-nullable cost_of_sales cannot be null');
        }
        $this->container['cost_of_sales'] = $cost_of_sales;

        return $this;
    }

    /**
     * Gets gross_profit
     *
     * @return float
     */
    public function getGrossProfit()
    {
        return $this->container['gross_profit'];
    }

    /**
     * Sets gross_profit
     *
     * @param float $gross_profit gross_profit
     *
     * @return self
     */
    public function setGrossProfit($gross_profit)
    {
        if (is_null($gross_profit)) {
            throw new \InvalidArgumentException('non-nullable gross_profit cannot be null');
        }
        $this->container['gross_profit'] = $gross_profit;

        return $this;
    }

    /**
     * Gets expenses
     *
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsReportLine|null
     */
    public function getExpenses()
    {
        return $this->container['expenses'];
    }

    /**
     * Sets expenses
     *
     * @param \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsReportLine|null $expenses expenses
     *
     * @return self
     */
    public function setExpenses($expenses)
    {
        if (is_null($expenses)) {
            throw new \InvalidArgumentException('non-nullable expenses cannot be null');
        }
        $this->container['expenses'] = $expenses;

        return $this;
    }

    /**
     * Gets net_operating_profit
     *
     * @return float
     */
    public function getNetOperatingProfit()
    {
        return $this->container['net_operating_profit'];
    }

    /**
     * Sets net_operating_profit
     *
     * @param float $net_operating_profit net_operating_profit
     *
     * @return self
     */
    public function setNetOperatingProfit($net_operating_profit)
    {
        if (is_null($net_operating_profit)) {
            throw new \InvalidArgumentException('non-nullable net_operating_profit cannot be null');
        }
        $this->container['net_operating_profit'] = $net_operating_profit;

        return $this;
    }

    /**
     * Gets other_expenses
     *
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsReportLine|null
     */
    public function getOtherExpenses()
    {
        return $this->container['other_expenses'];
    }

    /**
     * Sets other_expenses
     *
     * @param \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsReportLine|null $other_expenses other_expenses
     *
     * @return self
     */
    public function setOtherExpenses($other_expenses)
    {
        if (is_null($other_expenses)) {
            throw new \InvalidArgumentException('non-nullable other_expenses cannot be null');
        }
        $this->container['other_expenses'] = $other_expenses;

        return $this;
    }

    /**
     * Gets other_income
     *
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsReportLine|null
     */
    public function getOtherIncome()
    {
        return $this->container['other_income'];
    }

    /**
     * Sets other_income
     *
     * @param \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsReportLine|null $other_income other_income
     *
     * @return self
     */
    public function setOtherIncome($other_income)
    {
        if (is_null($other_income)) {
            throw new \InvalidArgumentException('non-nullable other_income cannot be null');
        }
        $this->container['other_income'] = $other_income;

        return $this;
    }

    /**
     * Gets net_other_income
     *
     * @return float
     */
    public function getNetOtherIncome()
    {
        return $this->container['net_other_income'];
    }

    /**
     * Sets net_other_income
     *
     * @param float $net_other_income net_other_income
     *
     * @return self
     */
    public function setNetOtherIncome($net_other_income)
    {
        if (is_null($net_other_income)) {
            throw new \InvalidArgumentException('non-nullable net_other_income cannot be null');
        }
        $this->container['net_other_income'] = $net_other_income;

        return $this;
    }

    /**
     * Gets net_profit
     *
     * @return float
     */
    public function getNetProfit()
    {
        return $this->container['net_profit'];
    }

    /**
     * Sets net_profit
     *
     * @param float $net_profit net_profit
     *
     * @return self
     */
    public function setNetProfit($net_profit)
    {
        if (is_null($net_profit)) {
            throw new \InvalidArgumentException('non-nullable net_profit cannot be null');
        }
        $this->container['net_profit'] = $net_profit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


