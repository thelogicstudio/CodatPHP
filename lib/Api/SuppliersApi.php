<?php
/**
 * SuppliersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  TheLogicStudio\CodatPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Codat API
 *
 * [See our API changes](https://docs.codat.io/changelog)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TheLogicStudio\CodatPHP\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TheLogicStudio\CodatPHP\ApiException;
use TheLogicStudio\CodatPHP\Configuration;
use TheLogicStudio\CodatPHP\HeaderSelector;
use TheLogicStudio\CodatPHP\ObjectSerializer;

/**
 * SuppliersApi Class Doc Comment
 *
 * @category Class
 * @package  TheLogicStudio\CodatPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SuppliersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGet' => [
            'application/json',
        ],
        'companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGet' => [
            'application/json',
        ],
        'companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsGet' => [
            'application/json',
        ],
        'companiesCompanyIdConnectionsConnectionIdPushSuppliersPost' => [
            'application/json',
        ],
        'companiesCompanyIdConnectionsConnectionIdPushSuppliersSupplierIdPut' => [
            'application/json',
        ],
        'companiesCompanyIdDataSuppliersGet' => [
            'application/json',
        ],
        'companiesCompanyIdDataSuppliersSupplierIdGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGet
     *
     * @param  string $company_id company_id (required)
     * @param  string $connection_id connection_id (required)
     * @param  string $supplier_id supplier_id (required)
     * @param  string $attachment_id attachment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGet($company_id, $connection_id, $supplier_id, $attachment_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGet'][0])
    {
        $this->companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGetWithHttpInfo($company_id, $connection_id, $supplier_id, $attachment_id, $contentType);
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGetWithHttpInfo
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $supplier_id (required)
     * @param  string $attachment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGetWithHttpInfo($company_id, $connection_id, $supplier_id, $attachment_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGet'][0])
    {
        $request = $this->companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGetRequest($company_id, $connection_id, $supplier_id, $attachment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGetAsync
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $supplier_id (required)
     * @param  string $attachment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGetAsync($company_id, $connection_id, $supplier_id, $attachment_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGet'][0])
    {
        return $this->companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGetAsyncWithHttpInfo($company_id, $connection_id, $supplier_id, $attachment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGetAsyncWithHttpInfo
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $supplier_id (required)
     * @param  string $attachment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGetAsyncWithHttpInfo($company_id, $connection_id, $supplier_id, $attachment_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGet'][0])
    {
        $returnType = '';
        $request = $this->companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGetRequest($company_id, $connection_id, $supplier_id, $attachment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGet'
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $supplier_id (required)
     * @param  string $attachment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGetRequest($company_id, $connection_id, $supplier_id, $attachment_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGet'
            );
        }

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGet'
            );
        }

        // verify the required parameter 'supplier_id' is set
        if ($supplier_id === null || (is_array($supplier_id) && count($supplier_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier_id when calling companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGet'
            );
        }

        // verify the required parameter 'attachment_id' is set
        if ($attachment_id === null || (is_array($attachment_id) && count($attachment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachment_id when calling companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdDownloadGet'
            );
        }


        $resourcePath = '/companies/{companyId}/connections/{connectionId}/data/suppliers/{supplierId}/attachments/{attachmentId}/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }
        // path params
        if ($supplier_id !== null) {
            $resourcePath = str_replace(
                '{' . 'supplierId' . '}',
                ObjectSerializer::toPathValue($supplier_id),
                $resourcePath
            );
        }
        // path params
        if ($attachment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachmentId' . '}',
                ObjectSerializer::toPathValue($attachment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGet
     *
     * @param  string $company_id company_id (required)
     * @param  string $connection_id connection_id (required)
     * @param  string $supplier_id supplier_id (required)
     * @param  string $attachment_id attachment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDatasetAttachment
     */
    public function companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGet($company_id, $connection_id, $supplier_id, $attachment_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGet'][0])
    {
        list($response) = $this->companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGetWithHttpInfo($company_id, $connection_id, $supplier_id, $attachment_id, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGetWithHttpInfo
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $supplier_id (required)
     * @param  string $attachment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDatasetAttachment, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGetWithHttpInfo($company_id, $connection_id, $supplier_id, $attachment_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGet'][0])
    {
        $request = $this->companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGetRequest($company_id, $connection_id, $supplier_id, $attachment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDatasetAttachment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDatasetAttachment' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDatasetAttachment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDatasetAttachment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDatasetAttachment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGetAsync
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $supplier_id (required)
     * @param  string $attachment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGetAsync($company_id, $connection_id, $supplier_id, $attachment_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGet'][0])
    {
        return $this->companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGetAsyncWithHttpInfo($company_id, $connection_id, $supplier_id, $attachment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGetAsyncWithHttpInfo
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $supplier_id (required)
     * @param  string $attachment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGetAsyncWithHttpInfo($company_id, $connection_id, $supplier_id, $attachment_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDatasetAttachment';
        $request = $this->companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGetRequest($company_id, $connection_id, $supplier_id, $attachment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGet'
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $supplier_id (required)
     * @param  string $attachment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGetRequest($company_id, $connection_id, $supplier_id, $attachment_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGet'
            );
        }

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGet'
            );
        }

        // verify the required parameter 'supplier_id' is set
        if ($supplier_id === null || (is_array($supplier_id) && count($supplier_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier_id when calling companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGet'
            );
        }

        // verify the required parameter 'attachment_id' is set
        if ($attachment_id === null || (is_array($attachment_id) && count($attachment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachment_id when calling companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsAttachmentIdGet'
            );
        }


        $resourcePath = '/companies/{companyId}/connections/{connectionId}/data/suppliers/{supplierId}/attachments/{attachmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }
        // path params
        if ($supplier_id !== null) {
            $resourcePath = str_replace(
                '{' . 'supplierId' . '}',
                ObjectSerializer::toPathValue($supplier_id),
                $resourcePath
            );
        }
        // path params
        if ($attachment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachmentId' . '}',
                ObjectSerializer::toPathValue($attachment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsGet
     *
     * @param  string $company_id company_id (required)
     * @param  string $connection_id connection_id (required)
     * @param  string $supplier_id supplier_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDataset
     */
    public function companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsGet($company_id, $connection_id, $supplier_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsGet'][0])
    {
        list($response) = $this->companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsGetWithHttpInfo($company_id, $connection_id, $supplier_id, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsGetWithHttpInfo
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $supplier_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDataset, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsGetWithHttpInfo($company_id, $connection_id, $supplier_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsGet'][0])
    {
        $request = $this->companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsGetRequest($company_id, $connection_id, $supplier_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDataset' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDataset' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDataset', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDataset';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDataset',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsGetAsync
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $supplier_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsGetAsync($company_id, $connection_id, $supplier_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsGet'][0])
    {
        return $this->companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsGetAsyncWithHttpInfo($company_id, $connection_id, $supplier_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsGetAsyncWithHttpInfo
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $supplier_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsGetAsyncWithHttpInfo($company_id, $connection_id, $supplier_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDataset';
        $request = $this->companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsGetRequest($company_id, $connection_id, $supplier_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsGet'
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $supplier_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsGetRequest($company_id, $connection_id, $supplier_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsGet'
            );
        }

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsGet'
            );
        }

        // verify the required parameter 'supplier_id' is set
        if ($supplier_id === null || (is_array($supplier_id) && count($supplier_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier_id when calling companiesCompanyIdConnectionsConnectionIdDataSuppliersSupplierIdAttachmentsGet'
            );
        }


        $resourcePath = '/companies/{companyId}/connections/{connectionId}/data/suppliers/{supplierId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }
        // path params
        if ($supplier_id !== null) {
            $resourcePath = str_replace(
                '{' . 'supplierId' . '}',
                ObjectSerializer::toPathValue($supplier_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdPushSuppliersPost
     *
     * @param  string $company_id company_id (required)
     * @param  string $connection_id connection_id (required)
     * @param  int $timeout_in_minutes timeout_in_minutes (optional)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplier $codat_data_contracts_datasets_supplier codat_data_contracts_datasets_supplier (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushSuppliersPost'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplierPushOperation
     */
    public function companiesCompanyIdConnectionsConnectionIdPushSuppliersPost($company_id, $connection_id, $timeout_in_minutes = null, $codat_data_contracts_datasets_supplier = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushSuppliersPost'][0])
    {
        list($response) = $this->companiesCompanyIdConnectionsConnectionIdPushSuppliersPostWithHttpInfo($company_id, $connection_id, $timeout_in_minutes, $codat_data_contracts_datasets_supplier, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdPushSuppliersPostWithHttpInfo
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  int $timeout_in_minutes (optional)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplier $codat_data_contracts_datasets_supplier (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushSuppliersPost'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplierPushOperation, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdConnectionsConnectionIdPushSuppliersPostWithHttpInfo($company_id, $connection_id, $timeout_in_minutes = null, $codat_data_contracts_datasets_supplier = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushSuppliersPost'][0])
    {
        $request = $this->companiesCompanyIdConnectionsConnectionIdPushSuppliersPostRequest($company_id, $connection_id, $timeout_in_minutes, $codat_data_contracts_datasets_supplier, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplierPushOperation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplierPushOperation' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplierPushOperation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplierPushOperation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplierPushOperation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdPushSuppliersPostAsync
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  int $timeout_in_minutes (optional)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplier $codat_data_contracts_datasets_supplier (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushSuppliersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdPushSuppliersPostAsync($company_id, $connection_id, $timeout_in_minutes = null, $codat_data_contracts_datasets_supplier = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushSuppliersPost'][0])
    {
        return $this->companiesCompanyIdConnectionsConnectionIdPushSuppliersPostAsyncWithHttpInfo($company_id, $connection_id, $timeout_in_minutes, $codat_data_contracts_datasets_supplier, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdPushSuppliersPostAsyncWithHttpInfo
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  int $timeout_in_minutes (optional)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplier $codat_data_contracts_datasets_supplier (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushSuppliersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdPushSuppliersPostAsyncWithHttpInfo($company_id, $connection_id, $timeout_in_minutes = null, $codat_data_contracts_datasets_supplier = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushSuppliersPost'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplierPushOperation';
        $request = $this->companiesCompanyIdConnectionsConnectionIdPushSuppliersPostRequest($company_id, $connection_id, $timeout_in_minutes, $codat_data_contracts_datasets_supplier, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdConnectionsConnectionIdPushSuppliersPost'
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  int $timeout_in_minutes (optional)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplier $codat_data_contracts_datasets_supplier (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushSuppliersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdConnectionsConnectionIdPushSuppliersPostRequest($company_id, $connection_id, $timeout_in_minutes = null, $codat_data_contracts_datasets_supplier = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushSuppliersPost'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdConnectionsConnectionIdPushSuppliersPost'
            );
        }

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling companiesCompanyIdConnectionsConnectionIdPushSuppliersPost'
            );
        }




        $resourcePath = '/companies/{companyId}/connections/{connectionId}/push/suppliers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timeout_in_minutes,
            'timeoutInMinutes', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($codat_data_contracts_datasets_supplier)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($codat_data_contracts_datasets_supplier));
            } else {
                $httpBody = $codat_data_contracts_datasets_supplier;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdPushSuppliersSupplierIdPut
     *
     * @param  string $company_id company_id (required)
     * @param  string $connection_id connection_id (required)
     * @param  string $supplier_id supplier_id (required)
     * @param  int $timeout_in_minutes timeout_in_minutes (optional)
     * @param  bool $force_update force_update (optional, default to false)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplier $codat_data_contracts_datasets_supplier codat_data_contracts_datasets_supplier (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushSuppliersSupplierIdPut'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplierPushOperation
     */
    public function companiesCompanyIdConnectionsConnectionIdPushSuppliersSupplierIdPut($company_id, $connection_id, $supplier_id, $timeout_in_minutes = null, $force_update = false, $codat_data_contracts_datasets_supplier = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushSuppliersSupplierIdPut'][0])
    {
        list($response) = $this->companiesCompanyIdConnectionsConnectionIdPushSuppliersSupplierIdPutWithHttpInfo($company_id, $connection_id, $supplier_id, $timeout_in_minutes, $force_update, $codat_data_contracts_datasets_supplier, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdPushSuppliersSupplierIdPutWithHttpInfo
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $supplier_id (required)
     * @param  int $timeout_in_minutes (optional)
     * @param  bool $force_update (optional, default to false)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplier $codat_data_contracts_datasets_supplier (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushSuppliersSupplierIdPut'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplierPushOperation, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdConnectionsConnectionIdPushSuppliersSupplierIdPutWithHttpInfo($company_id, $connection_id, $supplier_id, $timeout_in_minutes = null, $force_update = false, $codat_data_contracts_datasets_supplier = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushSuppliersSupplierIdPut'][0])
    {
        $request = $this->companiesCompanyIdConnectionsConnectionIdPushSuppliersSupplierIdPutRequest($company_id, $connection_id, $supplier_id, $timeout_in_minutes, $force_update, $codat_data_contracts_datasets_supplier, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplierPushOperation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplierPushOperation' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplierPushOperation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplierPushOperation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplierPushOperation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdPushSuppliersSupplierIdPutAsync
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $supplier_id (required)
     * @param  int $timeout_in_minutes (optional)
     * @param  bool $force_update (optional, default to false)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplier $codat_data_contracts_datasets_supplier (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushSuppliersSupplierIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdPushSuppliersSupplierIdPutAsync($company_id, $connection_id, $supplier_id, $timeout_in_minutes = null, $force_update = false, $codat_data_contracts_datasets_supplier = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushSuppliersSupplierIdPut'][0])
    {
        return $this->companiesCompanyIdConnectionsConnectionIdPushSuppliersSupplierIdPutAsyncWithHttpInfo($company_id, $connection_id, $supplier_id, $timeout_in_minutes, $force_update, $codat_data_contracts_datasets_supplier, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdPushSuppliersSupplierIdPutAsyncWithHttpInfo
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $supplier_id (required)
     * @param  int $timeout_in_minutes (optional)
     * @param  bool $force_update (optional, default to false)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplier $codat_data_contracts_datasets_supplier (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushSuppliersSupplierIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdPushSuppliersSupplierIdPutAsyncWithHttpInfo($company_id, $connection_id, $supplier_id, $timeout_in_minutes = null, $force_update = false, $codat_data_contracts_datasets_supplier = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushSuppliersSupplierIdPut'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplierPushOperation';
        $request = $this->companiesCompanyIdConnectionsConnectionIdPushSuppliersSupplierIdPutRequest($company_id, $connection_id, $supplier_id, $timeout_in_minutes, $force_update, $codat_data_contracts_datasets_supplier, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdConnectionsConnectionIdPushSuppliersSupplierIdPut'
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $supplier_id (required)
     * @param  int $timeout_in_minutes (optional)
     * @param  bool $force_update (optional, default to false)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplier $codat_data_contracts_datasets_supplier (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushSuppliersSupplierIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdConnectionsConnectionIdPushSuppliersSupplierIdPutRequest($company_id, $connection_id, $supplier_id, $timeout_in_minutes = null, $force_update = false, $codat_data_contracts_datasets_supplier = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushSuppliersSupplierIdPut'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdConnectionsConnectionIdPushSuppliersSupplierIdPut'
            );
        }

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling companiesCompanyIdConnectionsConnectionIdPushSuppliersSupplierIdPut'
            );
        }

        // verify the required parameter 'supplier_id' is set
        if ($supplier_id === null || (is_array($supplier_id) && count($supplier_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier_id when calling companiesCompanyIdConnectionsConnectionIdPushSuppliersSupplierIdPut'
            );
        }





        $resourcePath = '/companies/{companyId}/connections/{connectionId}/push/suppliers/{supplierId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timeout_in_minutes,
            'timeoutInMinutes', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $force_update,
            'forceUpdate', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }
        // path params
        if ($supplier_id !== null) {
            $resourcePath = str_replace(
                '{' . 'supplierId' . '}',
                ObjectSerializer::toPathValue($supplier_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($codat_data_contracts_datasets_supplier)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($codat_data_contracts_datasets_supplier));
            } else {
                $httpBody = $codat_data_contracts_datasets_supplier;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdDataSuppliersGet
     *
     * Gets the latest suppliers for a company, with pagination
     *
     * @param  string $company_id company_id (required)
     * @param  int $page page (required)
     * @param  int $page_size page_size (optional, default to 100)
     * @param  string $query query (optional)
     * @param  string $order_by order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdDataSuppliersGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplierPagedResponseModel
     */
    public function companiesCompanyIdDataSuppliersGet($company_id, $page, $page_size = 100, $query = null, $order_by = null, string $contentType = self::contentTypes['companiesCompanyIdDataSuppliersGet'][0])
    {
        list($response) = $this->companiesCompanyIdDataSuppliersGetWithHttpInfo($company_id, $page, $page_size, $query, $order_by, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdDataSuppliersGetWithHttpInfo
     *
     * Gets the latest suppliers for a company, with pagination
     *
     * @param  string $company_id (required)
     * @param  int $page (required)
     * @param  int $page_size (optional, default to 100)
     * @param  string $query (optional)
     * @param  string $order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdDataSuppliersGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplierPagedResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdDataSuppliersGetWithHttpInfo($company_id, $page, $page_size = 100, $query = null, $order_by = null, string $contentType = self::contentTypes['companiesCompanyIdDataSuppliersGet'][0])
    {
        $request = $this->companiesCompanyIdDataSuppliersGetRequest($company_id, $page, $page_size, $query, $order_by, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplierPagedResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplierPagedResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplierPagedResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplierPagedResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplierPagedResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdDataSuppliersGetAsync
     *
     * Gets the latest suppliers for a company, with pagination
     *
     * @param  string $company_id (required)
     * @param  int $page (required)
     * @param  int $page_size (optional, default to 100)
     * @param  string $query (optional)
     * @param  string $order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdDataSuppliersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdDataSuppliersGetAsync($company_id, $page, $page_size = 100, $query = null, $order_by = null, string $contentType = self::contentTypes['companiesCompanyIdDataSuppliersGet'][0])
    {
        return $this->companiesCompanyIdDataSuppliersGetAsyncWithHttpInfo($company_id, $page, $page_size, $query, $order_by, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdDataSuppliersGetAsyncWithHttpInfo
     *
     * Gets the latest suppliers for a company, with pagination
     *
     * @param  string $company_id (required)
     * @param  int $page (required)
     * @param  int $page_size (optional, default to 100)
     * @param  string $query (optional)
     * @param  string $order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdDataSuppliersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdDataSuppliersGetAsyncWithHttpInfo($company_id, $page, $page_size = 100, $query = null, $order_by = null, string $contentType = self::contentTypes['companiesCompanyIdDataSuppliersGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplierPagedResponseModel';
        $request = $this->companiesCompanyIdDataSuppliersGetRequest($company_id, $page, $page_size, $query, $order_by, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdDataSuppliersGet'
     *
     * @param  string $company_id (required)
     * @param  int $page (required)
     * @param  int $page_size (optional, default to 100)
     * @param  string $query (optional)
     * @param  string $order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdDataSuppliersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdDataSuppliersGetRequest($company_id, $page, $page_size = 100, $query = null, $order_by = null, string $contentType = self::contentTypes['companiesCompanyIdDataSuppliersGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdDataSuppliersGet'
            );
        }

        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling companiesCompanyIdDataSuppliersGet'
            );
        }





        $resourcePath = '/companies/{companyId}/data/suppliers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'orderBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdDataSuppliersSupplierIdGet
     *
     * Gets a single supplier corresponding to the supplied Id
     *
     * @param  string $company_id company_id (required)
     * @param  string $supplier_id supplier_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdDataSuppliersSupplierIdGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplier
     */
    public function companiesCompanyIdDataSuppliersSupplierIdGet($company_id, $supplier_id, string $contentType = self::contentTypes['companiesCompanyIdDataSuppliersSupplierIdGet'][0])
    {
        list($response) = $this->companiesCompanyIdDataSuppliersSupplierIdGetWithHttpInfo($company_id, $supplier_id, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdDataSuppliersSupplierIdGetWithHttpInfo
     *
     * Gets a single supplier corresponding to the supplied Id
     *
     * @param  string $company_id (required)
     * @param  string $supplier_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdDataSuppliersSupplierIdGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplier, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdDataSuppliersSupplierIdGetWithHttpInfo($company_id, $supplier_id, string $contentType = self::contentTypes['companiesCompanyIdDataSuppliersSupplierIdGet'][0])
    {
        $request = $this->companiesCompanyIdDataSuppliersSupplierIdGetRequest($company_id, $supplier_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplier' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplier' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplier', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplier';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplier',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdDataSuppliersSupplierIdGetAsync
     *
     * Gets a single supplier corresponding to the supplied Id
     *
     * @param  string $company_id (required)
     * @param  string $supplier_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdDataSuppliersSupplierIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdDataSuppliersSupplierIdGetAsync($company_id, $supplier_id, string $contentType = self::contentTypes['companiesCompanyIdDataSuppliersSupplierIdGet'][0])
    {
        return $this->companiesCompanyIdDataSuppliersSupplierIdGetAsyncWithHttpInfo($company_id, $supplier_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdDataSuppliersSupplierIdGetAsyncWithHttpInfo
     *
     * Gets a single supplier corresponding to the supplied Id
     *
     * @param  string $company_id (required)
     * @param  string $supplier_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdDataSuppliersSupplierIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdDataSuppliersSupplierIdGetAsyncWithHttpInfo($company_id, $supplier_id, string $contentType = self::contentTypes['companiesCompanyIdDataSuppliersSupplierIdGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsSupplier';
        $request = $this->companiesCompanyIdDataSuppliersSupplierIdGetRequest($company_id, $supplier_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdDataSuppliersSupplierIdGet'
     *
     * @param  string $company_id (required)
     * @param  string $supplier_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdDataSuppliersSupplierIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdDataSuppliersSupplierIdGetRequest($company_id, $supplier_id, string $contentType = self::contentTypes['companiesCompanyIdDataSuppliersSupplierIdGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdDataSuppliersSupplierIdGet'
            );
        }

        // verify the required parameter 'supplier_id' is set
        if ($supplier_id === null || (is_array($supplier_id) && count($supplier_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier_id when calling companiesCompanyIdDataSuppliersSupplierIdGet'
            );
        }


        $resourcePath = '/companies/{companyId}/data/suppliers/{supplierId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($supplier_id !== null) {
            $resourcePath = str_replace(
                '{' . 'supplierId' . '}',
                ObjectSerializer::toPathValue($supplier_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
