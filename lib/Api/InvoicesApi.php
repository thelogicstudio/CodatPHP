<?php
/**
 * InvoicesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  TheLogicStudio\CodatPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Codat API
 *
 * [See our API changes](https://docs.codat.io/changelog)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TheLogicStudio\CodatPHP\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TheLogicStudio\CodatPHP\ApiException;
use TheLogicStudio\CodatPHP\Configuration;
use TheLogicStudio\CodatPHP\HeaderSelector;
use TheLogicStudio\CodatPHP\ObjectSerializer;

/**
 * InvoicesApi Class Doc Comment
 *
 * @category Class
 * @package  TheLogicStudio\CodatPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InvoicesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGet' => [
            'application/json',
        ],
        'companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGet' => [
            'application/json',
        ],
        'companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsGet' => [
            'application/json',
        ],
        'companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdAttachmentPost' => [
            'application/json',
        ],
        'companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdPut' => [
            'application/json',
        ],
        'companiesCompanyIdConnectionsConnectionIdPushInvoicesPost' => [
            'application/json',
        ],
        'companiesCompanyIdDataInvoicesGet' => [
            'application/json',
        ],
        'companiesCompanyIdDataInvoicesInvoiceIdGet' => [
            'application/json',
        ],
        'companiesCompanyIdDataInvoicesInvoiceIdPdfGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGet
     *
     * @param  string $company_id company_id (required)
     * @param  string $connection_id connection_id (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $attachment_id attachment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGet($company_id, $connection_id, $invoice_id, $attachment_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGet'][0])
    {
        $this->companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGetWithHttpInfo($company_id, $connection_id, $invoice_id, $attachment_id, $contentType);
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGetWithHttpInfo
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $invoice_id (required)
     * @param  string $attachment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGetWithHttpInfo($company_id, $connection_id, $invoice_id, $attachment_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGet'][0])
    {
        $request = $this->companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGetRequest($company_id, $connection_id, $invoice_id, $attachment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGetAsync
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $invoice_id (required)
     * @param  string $attachment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGetAsync($company_id, $connection_id, $invoice_id, $attachment_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGet'][0])
    {
        return $this->companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGetAsyncWithHttpInfo($company_id, $connection_id, $invoice_id, $attachment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGetAsyncWithHttpInfo
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $invoice_id (required)
     * @param  string $attachment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGetAsyncWithHttpInfo($company_id, $connection_id, $invoice_id, $attachment_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGet'][0])
    {
        $returnType = '';
        $request = $this->companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGetRequest($company_id, $connection_id, $invoice_id, $attachment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGet'
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $invoice_id (required)
     * @param  string $attachment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGetRequest($company_id, $connection_id, $invoice_id, $attachment_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGet'
            );
        }

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGet'
            );
        }

        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGet'
            );
        }

        // verify the required parameter 'attachment_id' is set
        if ($attachment_id === null || (is_array($attachment_id) && count($attachment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachment_id when calling companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdDownloadGet'
            );
        }


        $resourcePath = '/companies/{companyId}/connections/{connectionId}/data/invoices/{invoiceId}/attachments/{attachmentId}/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($attachment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachmentId' . '}',
                ObjectSerializer::toPathValue($attachment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGet
     *
     * @param  string $company_id company_id (required)
     * @param  string $connection_id connection_id (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $attachment_id attachment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDatasetAttachment
     */
    public function companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGet($company_id, $connection_id, $invoice_id, $attachment_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGet'][0])
    {
        list($response) = $this->companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGetWithHttpInfo($company_id, $connection_id, $invoice_id, $attachment_id, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGetWithHttpInfo
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $invoice_id (required)
     * @param  string $attachment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDatasetAttachment, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGetWithHttpInfo($company_id, $connection_id, $invoice_id, $attachment_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGet'][0])
    {
        $request = $this->companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGetRequest($company_id, $connection_id, $invoice_id, $attachment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDatasetAttachment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDatasetAttachment' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDatasetAttachment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDatasetAttachment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDatasetAttachment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGetAsync
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $invoice_id (required)
     * @param  string $attachment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGetAsync($company_id, $connection_id, $invoice_id, $attachment_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGet'][0])
    {
        return $this->companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGetAsyncWithHttpInfo($company_id, $connection_id, $invoice_id, $attachment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGetAsyncWithHttpInfo
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $invoice_id (required)
     * @param  string $attachment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGetAsyncWithHttpInfo($company_id, $connection_id, $invoice_id, $attachment_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDatasetAttachment';
        $request = $this->companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGetRequest($company_id, $connection_id, $invoice_id, $attachment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGet'
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $invoice_id (required)
     * @param  string $attachment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGetRequest($company_id, $connection_id, $invoice_id, $attachment_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGet'
            );
        }

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGet'
            );
        }

        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGet'
            );
        }

        // verify the required parameter 'attachment_id' is set
        if ($attachment_id === null || (is_array($attachment_id) && count($attachment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachment_id when calling companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsAttachmentIdGet'
            );
        }


        $resourcePath = '/companies/{companyId}/connections/{connectionId}/data/invoices/{invoiceId}/attachments/{attachmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($attachment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachmentId' . '}',
                ObjectSerializer::toPathValue($attachment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsGet
     *
     * @param  string $company_id company_id (required)
     * @param  string $connection_id connection_id (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDataset
     */
    public function companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsGet($company_id, $connection_id, $invoice_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsGet'][0])
    {
        list($response) = $this->companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsGetWithHttpInfo($company_id, $connection_id, $invoice_id, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsGetWithHttpInfo
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $invoice_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDataset, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsGetWithHttpInfo($company_id, $connection_id, $invoice_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsGet'][0])
    {
        $request = $this->companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsGetRequest($company_id, $connection_id, $invoice_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDataset' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDataset' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDataset', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDataset';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDataset',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsGetAsync
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $invoice_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsGetAsync($company_id, $connection_id, $invoice_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsGet'][0])
    {
        return $this->companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsGetAsyncWithHttpInfo($company_id, $connection_id, $invoice_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsGetAsyncWithHttpInfo
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $invoice_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsGetAsyncWithHttpInfo($company_id, $connection_id, $invoice_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsAttachmentsDataset';
        $request = $this->companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsGetRequest($company_id, $connection_id, $invoice_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsGet'
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $invoice_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsGetRequest($company_id, $connection_id, $invoice_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsGet'
            );
        }

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsGet'
            );
        }

        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling companiesCompanyIdConnectionsConnectionIdDataInvoicesInvoiceIdAttachmentsGet'
            );
        }


        $resourcePath = '/companies/{companyId}/connections/{connectionId}/data/invoices/{invoiceId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdAttachmentPost
     *
     * @param  string $company_id company_id (required)
     * @param  string $connection_id connection_id (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdAttachmentPost'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdAttachmentPost($company_id, $connection_id, $invoice_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdAttachmentPost'][0])
    {
        $this->companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdAttachmentPostWithHttpInfo($company_id, $connection_id, $invoice_id, $contentType);
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdAttachmentPostWithHttpInfo
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $invoice_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdAttachmentPost'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdAttachmentPostWithHttpInfo($company_id, $connection_id, $invoice_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdAttachmentPost'][0])
    {
        $request = $this->companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdAttachmentPostRequest($company_id, $connection_id, $invoice_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdAttachmentPostAsync
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $invoice_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdAttachmentPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdAttachmentPostAsync($company_id, $connection_id, $invoice_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdAttachmentPost'][0])
    {
        return $this->companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdAttachmentPostAsyncWithHttpInfo($company_id, $connection_id, $invoice_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdAttachmentPostAsyncWithHttpInfo
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $invoice_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdAttachmentPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdAttachmentPostAsyncWithHttpInfo($company_id, $connection_id, $invoice_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdAttachmentPost'][0])
    {
        $returnType = '';
        $request = $this->companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdAttachmentPostRequest($company_id, $connection_id, $invoice_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdAttachmentPost'
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $invoice_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdAttachmentPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdAttachmentPostRequest($company_id, $connection_id, $invoice_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdAttachmentPost'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdAttachmentPost'
            );
        }

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdAttachmentPost'
            );
        }

        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdAttachmentPost'
            );
        }


        $resourcePath = '/companies/{companyId}/connections/{connectionId}/push/invoices/{invoiceId}/attachment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdPut
     *
     * Posts an updated invoice to the accounting package for a given company.
     *
     * @param  string $company_id company_id (required)
     * @param  string $connection_id connection_id (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  int $timeout_in_minutes timeout_in_minutes (optional)
     * @param  bool $force_update force_update (optional, default to false)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoice $codat_data_contracts_datasets_invoice codat_data_contracts_datasets_invoice (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdPut'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoicePushOperation
     */
    public function companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdPut($company_id, $connection_id, $invoice_id, $timeout_in_minutes = null, $force_update = false, $codat_data_contracts_datasets_invoice = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdPut'][0])
    {
        list($response) = $this->companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdPutWithHttpInfo($company_id, $connection_id, $invoice_id, $timeout_in_minutes, $force_update, $codat_data_contracts_datasets_invoice, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdPutWithHttpInfo
     *
     * Posts an updated invoice to the accounting package for a given company.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $invoice_id (required)
     * @param  int $timeout_in_minutes (optional)
     * @param  bool $force_update (optional, default to false)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoice $codat_data_contracts_datasets_invoice (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdPut'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoicePushOperation, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdPutWithHttpInfo($company_id, $connection_id, $invoice_id, $timeout_in_minutes = null, $force_update = false, $codat_data_contracts_datasets_invoice = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdPut'][0])
    {
        $request = $this->companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdPutRequest($company_id, $connection_id, $invoice_id, $timeout_in_minutes, $force_update, $codat_data_contracts_datasets_invoice, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoicePushOperation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoicePushOperation' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoicePushOperation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoicePushOperation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoicePushOperation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdPutAsync
     *
     * Posts an updated invoice to the accounting package for a given company.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $invoice_id (required)
     * @param  int $timeout_in_minutes (optional)
     * @param  bool $force_update (optional, default to false)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoice $codat_data_contracts_datasets_invoice (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdPutAsync($company_id, $connection_id, $invoice_id, $timeout_in_minutes = null, $force_update = false, $codat_data_contracts_datasets_invoice = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdPut'][0])
    {
        return $this->companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdPutAsyncWithHttpInfo($company_id, $connection_id, $invoice_id, $timeout_in_minutes, $force_update, $codat_data_contracts_datasets_invoice, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdPutAsyncWithHttpInfo
     *
     * Posts an updated invoice to the accounting package for a given company.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $invoice_id (required)
     * @param  int $timeout_in_minutes (optional)
     * @param  bool $force_update (optional, default to false)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoice $codat_data_contracts_datasets_invoice (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdPutAsyncWithHttpInfo($company_id, $connection_id, $invoice_id, $timeout_in_minutes = null, $force_update = false, $codat_data_contracts_datasets_invoice = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdPut'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoicePushOperation';
        $request = $this->companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdPutRequest($company_id, $connection_id, $invoice_id, $timeout_in_minutes, $force_update, $codat_data_contracts_datasets_invoice, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdPut'
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $invoice_id (required)
     * @param  int $timeout_in_minutes (optional)
     * @param  bool $force_update (optional, default to false)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoice $codat_data_contracts_datasets_invoice (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdPutRequest($company_id, $connection_id, $invoice_id, $timeout_in_minutes = null, $force_update = false, $codat_data_contracts_datasets_invoice = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdPut'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdPut'
            );
        }

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdPut'
            );
        }

        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling companiesCompanyIdConnectionsConnectionIdPushInvoicesInvoiceIdPut'
            );
        }





        $resourcePath = '/companies/{companyId}/connections/{connectionId}/push/invoices/{invoiceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timeout_in_minutes,
            'timeoutInMinutes', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $force_update,
            'forceUpdate', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($codat_data_contracts_datasets_invoice)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($codat_data_contracts_datasets_invoice));
            } else {
                $httpBody = $codat_data_contracts_datasets_invoice;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdPushInvoicesPost
     *
     * Posts a new invoice to the accounting package for a given company.
     *
     * @param  string $company_id company_id (required)
     * @param  string $connection_id connection_id (required)
     * @param  int $timeout_in_minutes timeout_in_minutes (optional)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoice $codat_data_contracts_datasets_invoice codat_data_contracts_datasets_invoice (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesPost'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoicePushOperation
     */
    public function companiesCompanyIdConnectionsConnectionIdPushInvoicesPost($company_id, $connection_id, $timeout_in_minutes = null, $codat_data_contracts_datasets_invoice = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesPost'][0])
    {
        list($response) = $this->companiesCompanyIdConnectionsConnectionIdPushInvoicesPostWithHttpInfo($company_id, $connection_id, $timeout_in_minutes, $codat_data_contracts_datasets_invoice, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdPushInvoicesPostWithHttpInfo
     *
     * Posts a new invoice to the accounting package for a given company.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  int $timeout_in_minutes (optional)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoice $codat_data_contracts_datasets_invoice (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesPost'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoicePushOperation, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdConnectionsConnectionIdPushInvoicesPostWithHttpInfo($company_id, $connection_id, $timeout_in_minutes = null, $codat_data_contracts_datasets_invoice = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesPost'][0])
    {
        $request = $this->companiesCompanyIdConnectionsConnectionIdPushInvoicesPostRequest($company_id, $connection_id, $timeout_in_minutes, $codat_data_contracts_datasets_invoice, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoicePushOperation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoicePushOperation' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoicePushOperation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoicePushOperation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoicePushOperation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdPushInvoicesPostAsync
     *
     * Posts a new invoice to the accounting package for a given company.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  int $timeout_in_minutes (optional)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoice $codat_data_contracts_datasets_invoice (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdPushInvoicesPostAsync($company_id, $connection_id, $timeout_in_minutes = null, $codat_data_contracts_datasets_invoice = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesPost'][0])
    {
        return $this->companiesCompanyIdConnectionsConnectionIdPushInvoicesPostAsyncWithHttpInfo($company_id, $connection_id, $timeout_in_minutes, $codat_data_contracts_datasets_invoice, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdPushInvoicesPostAsyncWithHttpInfo
     *
     * Posts a new invoice to the accounting package for a given company.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  int $timeout_in_minutes (optional)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoice $codat_data_contracts_datasets_invoice (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdPushInvoicesPostAsyncWithHttpInfo($company_id, $connection_id, $timeout_in_minutes = null, $codat_data_contracts_datasets_invoice = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesPost'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoicePushOperation';
        $request = $this->companiesCompanyIdConnectionsConnectionIdPushInvoicesPostRequest($company_id, $connection_id, $timeout_in_minutes, $codat_data_contracts_datasets_invoice, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdConnectionsConnectionIdPushInvoicesPost'
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  int $timeout_in_minutes (optional)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoice $codat_data_contracts_datasets_invoice (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdConnectionsConnectionIdPushInvoicesPostRequest($company_id, $connection_id, $timeout_in_minutes = null, $codat_data_contracts_datasets_invoice = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPushInvoicesPost'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdConnectionsConnectionIdPushInvoicesPost'
            );
        }

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling companiesCompanyIdConnectionsConnectionIdPushInvoicesPost'
            );
        }




        $resourcePath = '/companies/{companyId}/connections/{connectionId}/push/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timeout_in_minutes,
            'timeoutInMinutes', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($codat_data_contracts_datasets_invoice)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($codat_data_contracts_datasets_invoice));
            } else {
                $httpBody = $codat_data_contracts_datasets_invoice;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdDataInvoicesGet
     *
     * Gets the latest invoices for a company, with pagination
     *
     * @param  string $company_id company_id (required)
     * @param  int $page page (required)
     * @param  int $page_size page_size (optional, default to 100)
     * @param  string $query query (optional)
     * @param  string $order_by order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdDataInvoicesGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoicePagedResponseModel
     */
    public function companiesCompanyIdDataInvoicesGet($company_id, $page, $page_size = 100, $query = null, $order_by = null, string $contentType = self::contentTypes['companiesCompanyIdDataInvoicesGet'][0])
    {
        list($response) = $this->companiesCompanyIdDataInvoicesGetWithHttpInfo($company_id, $page, $page_size, $query, $order_by, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdDataInvoicesGetWithHttpInfo
     *
     * Gets the latest invoices for a company, with pagination
     *
     * @param  string $company_id (required)
     * @param  int $page (required)
     * @param  int $page_size (optional, default to 100)
     * @param  string $query (optional)
     * @param  string $order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdDataInvoicesGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoicePagedResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdDataInvoicesGetWithHttpInfo($company_id, $page, $page_size = 100, $query = null, $order_by = null, string $contentType = self::contentTypes['companiesCompanyIdDataInvoicesGet'][0])
    {
        $request = $this->companiesCompanyIdDataInvoicesGetRequest($company_id, $page, $page_size, $query, $order_by, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoicePagedResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoicePagedResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoicePagedResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoicePagedResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoicePagedResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdDataInvoicesGetAsync
     *
     * Gets the latest invoices for a company, with pagination
     *
     * @param  string $company_id (required)
     * @param  int $page (required)
     * @param  int $page_size (optional, default to 100)
     * @param  string $query (optional)
     * @param  string $order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdDataInvoicesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdDataInvoicesGetAsync($company_id, $page, $page_size = 100, $query = null, $order_by = null, string $contentType = self::contentTypes['companiesCompanyIdDataInvoicesGet'][0])
    {
        return $this->companiesCompanyIdDataInvoicesGetAsyncWithHttpInfo($company_id, $page, $page_size, $query, $order_by, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdDataInvoicesGetAsyncWithHttpInfo
     *
     * Gets the latest invoices for a company, with pagination
     *
     * @param  string $company_id (required)
     * @param  int $page (required)
     * @param  int $page_size (optional, default to 100)
     * @param  string $query (optional)
     * @param  string $order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdDataInvoicesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdDataInvoicesGetAsyncWithHttpInfo($company_id, $page, $page_size = 100, $query = null, $order_by = null, string $contentType = self::contentTypes['companiesCompanyIdDataInvoicesGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoicePagedResponseModel';
        $request = $this->companiesCompanyIdDataInvoicesGetRequest($company_id, $page, $page_size, $query, $order_by, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdDataInvoicesGet'
     *
     * @param  string $company_id (required)
     * @param  int $page (required)
     * @param  int $page_size (optional, default to 100)
     * @param  string $query (optional)
     * @param  string $order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdDataInvoicesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdDataInvoicesGetRequest($company_id, $page, $page_size = 100, $query = null, $order_by = null, string $contentType = self::contentTypes['companiesCompanyIdDataInvoicesGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdDataInvoicesGet'
            );
        }

        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling companiesCompanyIdDataInvoicesGet'
            );
        }





        $resourcePath = '/companies/{companyId}/data/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'orderBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdDataInvoicesInvoiceIdGet
     *
     * @param  string $company_id company_id (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdDataInvoicesInvoiceIdGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoice
     */
    public function companiesCompanyIdDataInvoicesInvoiceIdGet($company_id, $invoice_id, string $contentType = self::contentTypes['companiesCompanyIdDataInvoicesInvoiceIdGet'][0])
    {
        list($response) = $this->companiesCompanyIdDataInvoicesInvoiceIdGetWithHttpInfo($company_id, $invoice_id, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdDataInvoicesInvoiceIdGetWithHttpInfo
     *
     * @param  string $company_id (required)
     * @param  string $invoice_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdDataInvoicesInvoiceIdGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoice, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdDataInvoicesInvoiceIdGetWithHttpInfo($company_id, $invoice_id, string $contentType = self::contentTypes['companiesCompanyIdDataInvoicesInvoiceIdGet'][0])
    {
        $request = $this->companiesCompanyIdDataInvoicesInvoiceIdGetRequest($company_id, $invoice_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoice' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoice' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoice', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoice';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdDataInvoicesInvoiceIdGetAsync
     *
     * @param  string $company_id (required)
     * @param  string $invoice_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdDataInvoicesInvoiceIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdDataInvoicesInvoiceIdGetAsync($company_id, $invoice_id, string $contentType = self::contentTypes['companiesCompanyIdDataInvoicesInvoiceIdGet'][0])
    {
        return $this->companiesCompanyIdDataInvoicesInvoiceIdGetAsyncWithHttpInfo($company_id, $invoice_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdDataInvoicesInvoiceIdGetAsyncWithHttpInfo
     *
     * @param  string $company_id (required)
     * @param  string $invoice_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdDataInvoicesInvoiceIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdDataInvoicesInvoiceIdGetAsyncWithHttpInfo($company_id, $invoice_id, string $contentType = self::contentTypes['companiesCompanyIdDataInvoicesInvoiceIdGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataContractsDatasetsInvoice';
        $request = $this->companiesCompanyIdDataInvoicesInvoiceIdGetRequest($company_id, $invoice_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdDataInvoicesInvoiceIdGet'
     *
     * @param  string $company_id (required)
     * @param  string $invoice_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdDataInvoicesInvoiceIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdDataInvoicesInvoiceIdGetRequest($company_id, $invoice_id, string $contentType = self::contentTypes['companiesCompanyIdDataInvoicesInvoiceIdGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdDataInvoicesInvoiceIdGet'
            );
        }

        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling companiesCompanyIdDataInvoicesInvoiceIdGet'
            );
        }


        $resourcePath = '/companies/{companyId}/data/invoices/{invoiceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdDataInvoicesInvoiceIdPdfGet
     *
     * @param  string $company_id company_id (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdDataInvoicesInvoiceIdPdfGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function companiesCompanyIdDataInvoicesInvoiceIdPdfGet($company_id, $invoice_id, string $contentType = self::contentTypes['companiesCompanyIdDataInvoicesInvoiceIdPdfGet'][0])
    {
        $this->companiesCompanyIdDataInvoicesInvoiceIdPdfGetWithHttpInfo($company_id, $invoice_id, $contentType);
    }

    /**
     * Operation companiesCompanyIdDataInvoicesInvoiceIdPdfGetWithHttpInfo
     *
     * @param  string $company_id (required)
     * @param  string $invoice_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdDataInvoicesInvoiceIdPdfGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdDataInvoicesInvoiceIdPdfGetWithHttpInfo($company_id, $invoice_id, string $contentType = self::contentTypes['companiesCompanyIdDataInvoicesInvoiceIdPdfGet'][0])
    {
        $request = $this->companiesCompanyIdDataInvoicesInvoiceIdPdfGetRequest($company_id, $invoice_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdDataInvoicesInvoiceIdPdfGetAsync
     *
     * @param  string $company_id (required)
     * @param  string $invoice_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdDataInvoicesInvoiceIdPdfGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdDataInvoicesInvoiceIdPdfGetAsync($company_id, $invoice_id, string $contentType = self::contentTypes['companiesCompanyIdDataInvoicesInvoiceIdPdfGet'][0])
    {
        return $this->companiesCompanyIdDataInvoicesInvoiceIdPdfGetAsyncWithHttpInfo($company_id, $invoice_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdDataInvoicesInvoiceIdPdfGetAsyncWithHttpInfo
     *
     * @param  string $company_id (required)
     * @param  string $invoice_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdDataInvoicesInvoiceIdPdfGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdDataInvoicesInvoiceIdPdfGetAsyncWithHttpInfo($company_id, $invoice_id, string $contentType = self::contentTypes['companiesCompanyIdDataInvoicesInvoiceIdPdfGet'][0])
    {
        $returnType = '';
        $request = $this->companiesCompanyIdDataInvoicesInvoiceIdPdfGetRequest($company_id, $invoice_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdDataInvoicesInvoiceIdPdfGet'
     *
     * @param  string $company_id (required)
     * @param  string $invoice_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdDataInvoicesInvoiceIdPdfGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdDataInvoicesInvoiceIdPdfGetRequest($company_id, $invoice_id, string $contentType = self::contentTypes['companiesCompanyIdDataInvoicesInvoiceIdPdfGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdDataInvoicesInvoiceIdPdfGet'
            );
        }

        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling companiesCompanyIdDataInvoicesInvoiceIdPdfGet'
            );
        }


        $resourcePath = '/companies/{companyId}/data/invoices/{invoiceId}/pdf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
