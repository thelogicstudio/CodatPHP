<?php
/**
 * AssessApi
 * PHP version 7.4
 *
 * @category Class
 * @package  TheLogicStudio\CodatPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Codat API
 *
 * [See our API changes](https://docs.codat.io/changelog)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TheLogicStudio\CodatPHP\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TheLogicStudio\CodatPHP\ApiException;
use TheLogicStudio\CodatPHP\Configuration;
use TheLogicStudio\CodatPHP\HeaderSelector;
use TheLogicStudio\CodatPHP\ObjectSerializer;

/**
 * AssessApi Class Doc Comment
 *
 * @category Class
 * @package  TheLogicStudio\CodatPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AssessApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'companiesCompanyIdReportsEnhancedBalanceSheetAccountsGet' => [
            'application/json',
        ],
        'companiesCompanyIdReportsEnhancedCashFlowTransactionsGet' => [
            'application/json',
        ],
        'companiesCompanyIdReportsEnhancedInvoicesGet' => [
            'application/json',
        ],
        'companiesCompanyIdReportsEnhancedProfitAndLossAccountsGet' => [
            'application/json',
        ],
        'dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityDetailsGet' => [
            'application/json',
        ],
        'dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityStatusGet' => [
            'application/json',
        ],
        'dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegritySummariesGet' => [
            'application/json',
        ],
        'dataCompaniesCompanyIdAssessExcelDownloadGet' => [
            'application/json',
        ],
        'dataCompaniesCompanyIdAssessExcelGet' => [
            'application/json',
        ],
        'dataCompaniesCompanyIdAssessExcelPost' => [
            'application/json',
        ],
        'dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGet' => [
            'application/json',
        ],
        'dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGet' => [
            'application/json',
        ],
        'dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGet' => [
            'application/json',
        ],
        'dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGet' => [
            'application/json',
        ],
        'dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGet' => [
            'application/json',
        ],
        'dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsMrrGet' => [
            'application/json',
        ],
        'dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsProcessGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation companiesCompanyIdReportsEnhancedBalanceSheetAccountsGet
     *
     * Gets a list of accounts with account categories per statement period, specific to balance sheet
     *
     * @param  string $company_id company_id (required)
     * @param  \DateTime $report_date report_date (optional)
     * @param  int $number_of_periods number_of_periods (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdReportsEnhancedBalanceSheetAccountsGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatAssessDataContractsFinancialsStatementsEnhancedFinancialStatement
     */
    public function companiesCompanyIdReportsEnhancedBalanceSheetAccountsGet($company_id, $report_date = null, $number_of_periods = null, string $contentType = self::contentTypes['companiesCompanyIdReportsEnhancedBalanceSheetAccountsGet'][0])
    {
        list($response) = $this->companiesCompanyIdReportsEnhancedBalanceSheetAccountsGetWithHttpInfo($company_id, $report_date, $number_of_periods, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdReportsEnhancedBalanceSheetAccountsGetWithHttpInfo
     *
     * Gets a list of accounts with account categories per statement period, specific to balance sheet
     *
     * @param  string $company_id (required)
     * @param  \DateTime $report_date (optional)
     * @param  int $number_of_periods (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdReportsEnhancedBalanceSheetAccountsGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatAssessDataContractsFinancialsStatementsEnhancedFinancialStatement, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdReportsEnhancedBalanceSheetAccountsGetWithHttpInfo($company_id, $report_date = null, $number_of_periods = null, string $contentType = self::contentTypes['companiesCompanyIdReportsEnhancedBalanceSheetAccountsGet'][0])
    {
        $request = $this->companiesCompanyIdReportsEnhancedBalanceSheetAccountsGetRequest($company_id, $report_date, $number_of_periods, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatAssessDataContractsFinancialsStatementsEnhancedFinancialStatement' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatAssessDataContractsFinancialsStatementsEnhancedFinancialStatement' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatAssessDataContractsFinancialsStatementsEnhancedFinancialStatement', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatAssessDataContractsFinancialsStatementsEnhancedFinancialStatement';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatAssessDataContractsFinancialsStatementsEnhancedFinancialStatement',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdReportsEnhancedBalanceSheetAccountsGetAsync
     *
     * Gets a list of accounts with account categories per statement period, specific to balance sheet
     *
     * @param  string $company_id (required)
     * @param  \DateTime $report_date (optional)
     * @param  int $number_of_periods (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdReportsEnhancedBalanceSheetAccountsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdReportsEnhancedBalanceSheetAccountsGetAsync($company_id, $report_date = null, $number_of_periods = null, string $contentType = self::contentTypes['companiesCompanyIdReportsEnhancedBalanceSheetAccountsGet'][0])
    {
        return $this->companiesCompanyIdReportsEnhancedBalanceSheetAccountsGetAsyncWithHttpInfo($company_id, $report_date, $number_of_periods, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdReportsEnhancedBalanceSheetAccountsGetAsyncWithHttpInfo
     *
     * Gets a list of accounts with account categories per statement period, specific to balance sheet
     *
     * @param  string $company_id (required)
     * @param  \DateTime $report_date (optional)
     * @param  int $number_of_periods (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdReportsEnhancedBalanceSheetAccountsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdReportsEnhancedBalanceSheetAccountsGetAsyncWithHttpInfo($company_id, $report_date = null, $number_of_periods = null, string $contentType = self::contentTypes['companiesCompanyIdReportsEnhancedBalanceSheetAccountsGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatAssessDataContractsFinancialsStatementsEnhancedFinancialStatement';
        $request = $this->companiesCompanyIdReportsEnhancedBalanceSheetAccountsGetRequest($company_id, $report_date, $number_of_periods, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdReportsEnhancedBalanceSheetAccountsGet'
     *
     * @param  string $company_id (required)
     * @param  \DateTime $report_date (optional)
     * @param  int $number_of_periods (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdReportsEnhancedBalanceSheetAccountsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdReportsEnhancedBalanceSheetAccountsGetRequest($company_id, $report_date = null, $number_of_periods = null, string $contentType = self::contentTypes['companiesCompanyIdReportsEnhancedBalanceSheetAccountsGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdReportsEnhancedBalanceSheetAccountsGet'
            );
        }




        $resourcePath = '/companies/{companyId}/reports/enhancedBalanceSheet/accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $report_date,
            'reportDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_of_periods,
            'numberOfPeriods', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdReportsEnhancedCashFlowTransactionsGet
     *
     * Gets a list of banking transactions and their categories.
     *
     * @param  string $company_id company_id (required)
     * @param  int $page page (required)
     * @param  int $page_size page_size (optional, default to 100)
     * @param  string $query query (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdReportsEnhancedCashFlowTransactionsGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatAssessDataContractsCashFlowTransactionsCashFlowTransactionsReport
     */
    public function companiesCompanyIdReportsEnhancedCashFlowTransactionsGet($company_id, $page, $page_size = 100, $query = null, string $contentType = self::contentTypes['companiesCompanyIdReportsEnhancedCashFlowTransactionsGet'][0])
    {
        list($response) = $this->companiesCompanyIdReportsEnhancedCashFlowTransactionsGetWithHttpInfo($company_id, $page, $page_size, $query, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdReportsEnhancedCashFlowTransactionsGetWithHttpInfo
     *
     * Gets a list of banking transactions and their categories.
     *
     * @param  string $company_id (required)
     * @param  int $page (required)
     * @param  int $page_size (optional, default to 100)
     * @param  string $query (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdReportsEnhancedCashFlowTransactionsGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatAssessDataContractsCashFlowTransactionsCashFlowTransactionsReport, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdReportsEnhancedCashFlowTransactionsGetWithHttpInfo($company_id, $page, $page_size = 100, $query = null, string $contentType = self::contentTypes['companiesCompanyIdReportsEnhancedCashFlowTransactionsGet'][0])
    {
        $request = $this->companiesCompanyIdReportsEnhancedCashFlowTransactionsGetRequest($company_id, $page, $page_size, $query, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatAssessDataContractsCashFlowTransactionsCashFlowTransactionsReport' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatAssessDataContractsCashFlowTransactionsCashFlowTransactionsReport' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatAssessDataContractsCashFlowTransactionsCashFlowTransactionsReport', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatAssessDataContractsCashFlowTransactionsCashFlowTransactionsReport';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatAssessDataContractsCashFlowTransactionsCashFlowTransactionsReport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdReportsEnhancedCashFlowTransactionsGetAsync
     *
     * Gets a list of banking transactions and their categories.
     *
     * @param  string $company_id (required)
     * @param  int $page (required)
     * @param  int $page_size (optional, default to 100)
     * @param  string $query (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdReportsEnhancedCashFlowTransactionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdReportsEnhancedCashFlowTransactionsGetAsync($company_id, $page, $page_size = 100, $query = null, string $contentType = self::contentTypes['companiesCompanyIdReportsEnhancedCashFlowTransactionsGet'][0])
    {
        return $this->companiesCompanyIdReportsEnhancedCashFlowTransactionsGetAsyncWithHttpInfo($company_id, $page, $page_size, $query, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdReportsEnhancedCashFlowTransactionsGetAsyncWithHttpInfo
     *
     * Gets a list of banking transactions and their categories.
     *
     * @param  string $company_id (required)
     * @param  int $page (required)
     * @param  int $page_size (optional, default to 100)
     * @param  string $query (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdReportsEnhancedCashFlowTransactionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdReportsEnhancedCashFlowTransactionsGetAsyncWithHttpInfo($company_id, $page, $page_size = 100, $query = null, string $contentType = self::contentTypes['companiesCompanyIdReportsEnhancedCashFlowTransactionsGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatAssessDataContractsCashFlowTransactionsCashFlowTransactionsReport';
        $request = $this->companiesCompanyIdReportsEnhancedCashFlowTransactionsGetRequest($company_id, $page, $page_size, $query, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdReportsEnhancedCashFlowTransactionsGet'
     *
     * @param  string $company_id (required)
     * @param  int $page (required)
     * @param  int $page_size (optional, default to 100)
     * @param  string $query (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdReportsEnhancedCashFlowTransactionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdReportsEnhancedCashFlowTransactionsGetRequest($company_id, $page, $page_size = 100, $query = null, string $contentType = self::contentTypes['companiesCompanyIdReportsEnhancedCashFlowTransactionsGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdReportsEnhancedCashFlowTransactionsGet'
            );
        }

        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling companiesCompanyIdReportsEnhancedCashFlowTransactionsGet'
            );
        }




        $resourcePath = '/companies/{companyId}/reports/enhancedCashFlow/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdReportsEnhancedInvoicesGet
     *
     * @param  string $company_id company_id (required)
     * @param  int $page page (required)
     * @param  int $page_size page_size (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdReportsEnhancedInvoicesGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsReportsInvoicesReport
     */
    public function companiesCompanyIdReportsEnhancedInvoicesGet($company_id, $page, $page_size = 100, string $contentType = self::contentTypes['companiesCompanyIdReportsEnhancedInvoicesGet'][0])
    {
        list($response) = $this->companiesCompanyIdReportsEnhancedInvoicesGetWithHttpInfo($company_id, $page, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdReportsEnhancedInvoicesGetWithHttpInfo
     *
     * @param  string $company_id (required)
     * @param  int $page (required)
     * @param  int $page_size (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdReportsEnhancedInvoicesGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsReportsInvoicesReport, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdReportsEnhancedInvoicesGetWithHttpInfo($company_id, $page, $page_size = 100, string $contentType = self::contentTypes['companiesCompanyIdReportsEnhancedInvoicesGet'][0])
    {
        $request = $this->companiesCompanyIdReportsEnhancedInvoicesGetRequest($company_id, $page, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsReportsInvoicesReport' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsReportsInvoicesReport' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsReportsInvoicesReport', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsReportsInvoicesReport';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsReportsInvoicesReport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdReportsEnhancedInvoicesGetAsync
     *
     * @param  string $company_id (required)
     * @param  int $page (required)
     * @param  int $page_size (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdReportsEnhancedInvoicesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdReportsEnhancedInvoicesGetAsync($company_id, $page, $page_size = 100, string $contentType = self::contentTypes['companiesCompanyIdReportsEnhancedInvoicesGet'][0])
    {
        return $this->companiesCompanyIdReportsEnhancedInvoicesGetAsyncWithHttpInfo($company_id, $page, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdReportsEnhancedInvoicesGetAsyncWithHttpInfo
     *
     * @param  string $company_id (required)
     * @param  int $page (required)
     * @param  int $page_size (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdReportsEnhancedInvoicesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdReportsEnhancedInvoicesGetAsyncWithHttpInfo($company_id, $page, $page_size = 100, string $contentType = self::contentTypes['companiesCompanyIdReportsEnhancedInvoicesGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsReportsInvoicesReport';
        $request = $this->companiesCompanyIdReportsEnhancedInvoicesGetRequest($company_id, $page, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdReportsEnhancedInvoicesGet'
     *
     * @param  string $company_id (required)
     * @param  int $page (required)
     * @param  int $page_size (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdReportsEnhancedInvoicesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdReportsEnhancedInvoicesGetRequest($company_id, $page, $page_size = 100, string $contentType = self::contentTypes['companiesCompanyIdReportsEnhancedInvoicesGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdReportsEnhancedInvoicesGet'
            );
        }

        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling companiesCompanyIdReportsEnhancedInvoicesGet'
            );
        }



        $resourcePath = '/companies/{companyId}/reports/enhancedInvoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdReportsEnhancedProfitAndLossAccountsGet
     *
     * Gets a list of accounts with account categories per statement period, specific to profit and loss
     *
     * @param  string $company_id company_id (required)
     * @param  \DateTime $report_date report_date (optional)
     * @param  int $number_of_periods number_of_periods (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdReportsEnhancedProfitAndLossAccountsGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatAssessDataContractsFinancialsStatementsEnhancedFinancialStatement
     */
    public function companiesCompanyIdReportsEnhancedProfitAndLossAccountsGet($company_id, $report_date = null, $number_of_periods = null, string $contentType = self::contentTypes['companiesCompanyIdReportsEnhancedProfitAndLossAccountsGet'][0])
    {
        list($response) = $this->companiesCompanyIdReportsEnhancedProfitAndLossAccountsGetWithHttpInfo($company_id, $report_date, $number_of_periods, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdReportsEnhancedProfitAndLossAccountsGetWithHttpInfo
     *
     * Gets a list of accounts with account categories per statement period, specific to profit and loss
     *
     * @param  string $company_id (required)
     * @param  \DateTime $report_date (optional)
     * @param  int $number_of_periods (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdReportsEnhancedProfitAndLossAccountsGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatAssessDataContractsFinancialsStatementsEnhancedFinancialStatement, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdReportsEnhancedProfitAndLossAccountsGetWithHttpInfo($company_id, $report_date = null, $number_of_periods = null, string $contentType = self::contentTypes['companiesCompanyIdReportsEnhancedProfitAndLossAccountsGet'][0])
    {
        $request = $this->companiesCompanyIdReportsEnhancedProfitAndLossAccountsGetRequest($company_id, $report_date, $number_of_periods, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatAssessDataContractsFinancialsStatementsEnhancedFinancialStatement' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatAssessDataContractsFinancialsStatementsEnhancedFinancialStatement' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatAssessDataContractsFinancialsStatementsEnhancedFinancialStatement', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatAssessDataContractsFinancialsStatementsEnhancedFinancialStatement';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatAssessDataContractsFinancialsStatementsEnhancedFinancialStatement',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdReportsEnhancedProfitAndLossAccountsGetAsync
     *
     * Gets a list of accounts with account categories per statement period, specific to profit and loss
     *
     * @param  string $company_id (required)
     * @param  \DateTime $report_date (optional)
     * @param  int $number_of_periods (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdReportsEnhancedProfitAndLossAccountsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdReportsEnhancedProfitAndLossAccountsGetAsync($company_id, $report_date = null, $number_of_periods = null, string $contentType = self::contentTypes['companiesCompanyIdReportsEnhancedProfitAndLossAccountsGet'][0])
    {
        return $this->companiesCompanyIdReportsEnhancedProfitAndLossAccountsGetAsyncWithHttpInfo($company_id, $report_date, $number_of_periods, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdReportsEnhancedProfitAndLossAccountsGetAsyncWithHttpInfo
     *
     * Gets a list of accounts with account categories per statement period, specific to profit and loss
     *
     * @param  string $company_id (required)
     * @param  \DateTime $report_date (optional)
     * @param  int $number_of_periods (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdReportsEnhancedProfitAndLossAccountsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdReportsEnhancedProfitAndLossAccountsGetAsyncWithHttpInfo($company_id, $report_date = null, $number_of_periods = null, string $contentType = self::contentTypes['companiesCompanyIdReportsEnhancedProfitAndLossAccountsGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatAssessDataContractsFinancialsStatementsEnhancedFinancialStatement';
        $request = $this->companiesCompanyIdReportsEnhancedProfitAndLossAccountsGetRequest($company_id, $report_date, $number_of_periods, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdReportsEnhancedProfitAndLossAccountsGet'
     *
     * @param  string $company_id (required)
     * @param  \DateTime $report_date (optional)
     * @param  int $number_of_periods (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdReportsEnhancedProfitAndLossAccountsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdReportsEnhancedProfitAndLossAccountsGetRequest($company_id, $report_date = null, $number_of_periods = null, string $contentType = self::contentTypes['companiesCompanyIdReportsEnhancedProfitAndLossAccountsGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdReportsEnhancedProfitAndLossAccountsGet'
            );
        }




        $resourcePath = '/companies/{companyId}/reports/enhancedProfitAndLoss/accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $report_date,
            'reportDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_of_periods,
            'numberOfPeriods', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityDetailsGet
     *
     * Gets record-by-record match results for a given company and datatype, optionally restricted by a Codat query string.
     *
     * @param  string $company_id company_id (required)
     * @param  string $data_type data_type (required)
     * @param  int $page page (optional, default to 1)
     * @param  string $query query (optional)
     * @param  int $page_size page_size (optional)
     * @param  string $order_by order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityDetailsGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsDetailsTransactionDetailsPagedResponse
     */
    public function dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityDetailsGet($company_id, $data_type, $page = 1, $query = null, $page_size = null, $order_by = null, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityDetailsGet'][0])
    {
        list($response) = $this->dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityDetailsGetWithHttpInfo($company_id, $data_type, $page, $query, $page_size, $order_by, $contentType);
        return $response;
    }

    /**
     * Operation dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityDetailsGetWithHttpInfo
     *
     * Gets record-by-record match results for a given company and datatype, optionally restricted by a Codat query string.
     *
     * @param  string $company_id (required)
     * @param  string $data_type (required)
     * @param  int $page (optional, default to 1)
     * @param  string $query (optional)
     * @param  int $page_size (optional)
     * @param  string $order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityDetailsGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsDetailsTransactionDetailsPagedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityDetailsGetWithHttpInfo($company_id, $data_type, $page = 1, $query = null, $page_size = null, $order_by = null, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityDetailsGet'][0])
    {
        $request = $this->dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityDetailsGetRequest($company_id, $data_type, $page, $query, $page_size, $order_by, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsDetailsTransactionDetailsPagedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsDetailsTransactionDetailsPagedResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsDetailsTransactionDetailsPagedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsDetailsTransactionDetailsPagedResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsDetailsTransactionDetailsPagedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityDetailsGetAsync
     *
     * Gets record-by-record match results for a given company and datatype, optionally restricted by a Codat query string.
     *
     * @param  string $company_id (required)
     * @param  string $data_type (required)
     * @param  int $page (optional, default to 1)
     * @param  string $query (optional)
     * @param  int $page_size (optional)
     * @param  string $order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityDetailsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityDetailsGetAsync($company_id, $data_type, $page = 1, $query = null, $page_size = null, $order_by = null, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityDetailsGet'][0])
    {
        return $this->dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityDetailsGetAsyncWithHttpInfo($company_id, $data_type, $page, $query, $page_size, $order_by, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityDetailsGetAsyncWithHttpInfo
     *
     * Gets record-by-record match results for a given company and datatype, optionally restricted by a Codat query string.
     *
     * @param  string $company_id (required)
     * @param  string $data_type (required)
     * @param  int $page (optional, default to 1)
     * @param  string $query (optional)
     * @param  int $page_size (optional)
     * @param  string $order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityDetailsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityDetailsGetAsyncWithHttpInfo($company_id, $data_type, $page = 1, $query = null, $page_size = null, $order_by = null, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityDetailsGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsDetailsTransactionDetailsPagedResponse';
        $request = $this->dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityDetailsGetRequest($company_id, $data_type, $page, $query, $page_size, $order_by, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityDetailsGet'
     *
     * @param  string $company_id (required)
     * @param  string $data_type (required)
     * @param  int $page (optional, default to 1)
     * @param  string $query (optional)
     * @param  int $page_size (optional)
     * @param  string $order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityDetailsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityDetailsGetRequest($company_id, $data_type, $page = 1, $query = null, $page_size = null, $order_by = null, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityDetailsGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityDetailsGet'
            );
        }

        // verify the required parameter 'data_type' is set
        if ($data_type === null || (is_array($data_type) && count($data_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_type when calling dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityDetailsGet'
            );
        }






        $resourcePath = '/data/companies/{companyId}/assess/dataTypes/{dataType}/dataIntegrity/details';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'orderBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($data_type !== null) {
            $resourcePath = str_replace(
                '{' . 'dataType' . '}',
                ObjectSerializer::toPathValue($data_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityStatusGet
     *
     * Gets match status for a given company and datatype.
     *
     * @param  string $company_id company_id (required)
     * @param  string $data_type data_type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityStatusGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsMetadataMatchMetadataResponse
     */
    public function dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityStatusGet($company_id, $data_type, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityStatusGet'][0])
    {
        list($response) = $this->dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityStatusGetWithHttpInfo($company_id, $data_type, $contentType);
        return $response;
    }

    /**
     * Operation dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityStatusGetWithHttpInfo
     *
     * Gets match status for a given company and datatype.
     *
     * @param  string $company_id (required)
     * @param  string $data_type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityStatusGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsMetadataMatchMetadataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityStatusGetWithHttpInfo($company_id, $data_type, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityStatusGet'][0])
    {
        $request = $this->dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityStatusGetRequest($company_id, $data_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsMetadataMatchMetadataResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsMetadataMatchMetadataResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsMetadataMatchMetadataResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsMetadataMatchMetadataResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsMetadataMatchMetadataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityStatusGetAsync
     *
     * Gets match status for a given company and datatype.
     *
     * @param  string $company_id (required)
     * @param  string $data_type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityStatusGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityStatusGetAsync($company_id, $data_type, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityStatusGet'][0])
    {
        return $this->dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityStatusGetAsyncWithHttpInfo($company_id, $data_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityStatusGetAsyncWithHttpInfo
     *
     * Gets match status for a given company and datatype.
     *
     * @param  string $company_id (required)
     * @param  string $data_type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityStatusGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityStatusGetAsyncWithHttpInfo($company_id, $data_type, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityStatusGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsMetadataMatchMetadataResponse';
        $request = $this->dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityStatusGetRequest($company_id, $data_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityStatusGet'
     *
     * @param  string $company_id (required)
     * @param  string $data_type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityStatusGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityStatusGetRequest($company_id, $data_type, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityStatusGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityStatusGet'
            );
        }

        // verify the required parameter 'data_type' is set
        if ($data_type === null || (is_array($data_type) && count($data_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_type when calling dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegrityStatusGet'
            );
        }


        $resourcePath = '/data/companies/{companyId}/assess/dataTypes/{dataType}/dataIntegrity/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($data_type !== null) {
            $resourcePath = str_replace(
                '{' . 'dataType' . '}',
                ObjectSerializer::toPathValue($data_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegritySummariesGet
     *
     * Gets match summary for a given company and datatype, optionally restricted by a Codat query string.
     *
     * @param  string $company_id company_id (required)
     * @param  string $data_type data_type (required)
     * @param  string $query query (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegritySummariesGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsSummaryMatchSummariesResponse
     */
    public function dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegritySummariesGet($company_id, $data_type, $query = null, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegritySummariesGet'][0])
    {
        list($response) = $this->dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegritySummariesGetWithHttpInfo($company_id, $data_type, $query, $contentType);
        return $response;
    }

    /**
     * Operation dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegritySummariesGetWithHttpInfo
     *
     * Gets match summary for a given company and datatype, optionally restricted by a Codat query string.
     *
     * @param  string $company_id (required)
     * @param  string $data_type (required)
     * @param  string $query (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegritySummariesGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsSummaryMatchSummariesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegritySummariesGetWithHttpInfo($company_id, $data_type, $query = null, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegritySummariesGet'][0])
    {
        $request = $this->dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegritySummariesGetRequest($company_id, $data_type, $query, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsSummaryMatchSummariesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsSummaryMatchSummariesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsSummaryMatchSummariesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsSummaryMatchSummariesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsSummaryMatchSummariesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegritySummariesGetAsync
     *
     * Gets match summary for a given company and datatype, optionally restricted by a Codat query string.
     *
     * @param  string $company_id (required)
     * @param  string $data_type (required)
     * @param  string $query (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegritySummariesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegritySummariesGetAsync($company_id, $data_type, $query = null, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegritySummariesGet'][0])
    {
        return $this->dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegritySummariesGetAsyncWithHttpInfo($company_id, $data_type, $query, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegritySummariesGetAsyncWithHttpInfo
     *
     * Gets match summary for a given company and datatype, optionally restricted by a Codat query string.
     *
     * @param  string $company_id (required)
     * @param  string $data_type (required)
     * @param  string $query (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegritySummariesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegritySummariesGetAsyncWithHttpInfo($company_id, $data_type, $query = null, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegritySummariesGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatDataIntegrityContractsSummaryMatchSummariesResponse';
        $request = $this->dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegritySummariesGetRequest($company_id, $data_type, $query, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegritySummariesGet'
     *
     * @param  string $company_id (required)
     * @param  string $data_type (required)
     * @param  string $query (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegritySummariesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegritySummariesGetRequest($company_id, $data_type, $query = null, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegritySummariesGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegritySummariesGet'
            );
        }

        // verify the required parameter 'data_type' is set
        if ($data_type === null || (is_array($data_type) && count($data_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_type when calling dataCompaniesCompanyIdAssessDataTypesDataTypeDataIntegritySummariesGet'
            );
        }



        $resourcePath = '/data/companies/{companyId}/assess/dataTypes/{dataType}/dataIntegrity/summaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($data_type !== null) {
            $resourcePath = str_replace(
                '{' . 'dataType' . '}',
                ObjectSerializer::toPathValue($data_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataCompaniesCompanyIdAssessExcelDownloadGet
     *
     * Download the Excel report to a local drive.
     *
     * @param  string $company_id company_id (required)
     * @param  string $report_type report_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessExcelDownloadGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function dataCompaniesCompanyIdAssessExcelDownloadGet($company_id, $report_type = null, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessExcelDownloadGet'][0])
    {
        list($response) = $this->dataCompaniesCompanyIdAssessExcelDownloadGetWithHttpInfo($company_id, $report_type, $contentType);
        return $response;
    }

    /**
     * Operation dataCompaniesCompanyIdAssessExcelDownloadGetWithHttpInfo
     *
     * Download the Excel report to a local drive.
     *
     * @param  string $company_id (required)
     * @param  string $report_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessExcelDownloadGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataCompaniesCompanyIdAssessExcelDownloadGetWithHttpInfo($company_id, $report_type = null, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessExcelDownloadGet'][0])
    {
        $request = $this->dataCompaniesCompanyIdAssessExcelDownloadGetRequest($company_id, $report_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dataCompaniesCompanyIdAssessExcelDownloadGetAsync
     *
     * Download the Excel report to a local drive.
     *
     * @param  string $company_id (required)
     * @param  string $report_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessExcelDownloadGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataCompaniesCompanyIdAssessExcelDownloadGetAsync($company_id, $report_type = null, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessExcelDownloadGet'][0])
    {
        return $this->dataCompaniesCompanyIdAssessExcelDownloadGetAsyncWithHttpInfo($company_id, $report_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataCompaniesCompanyIdAssessExcelDownloadGetAsyncWithHttpInfo
     *
     * Download the Excel report to a local drive.
     *
     * @param  string $company_id (required)
     * @param  string $report_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessExcelDownloadGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataCompaniesCompanyIdAssessExcelDownloadGetAsyncWithHttpInfo($company_id, $report_type = null, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessExcelDownloadGet'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->dataCompaniesCompanyIdAssessExcelDownloadGetRequest($company_id, $report_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataCompaniesCompanyIdAssessExcelDownloadGet'
     *
     * @param  string $company_id (required)
     * @param  string $report_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessExcelDownloadGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataCompaniesCompanyIdAssessExcelDownloadGetRequest($company_id, $report_type = null, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessExcelDownloadGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling dataCompaniesCompanyIdAssessExcelDownloadGet'
            );
        }



        $resourcePath = '/data/companies/{companyId}/assess/excel/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $report_type,
            'reportType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataCompaniesCompanyIdAssessExcelGet
     *
     * Returns the status of the latest report requested.
     *
     * @param  string $company_id company_id (required)
     * @param  string $report_type report_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessExcelGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsAssessAssessExcelMeta
     */
    public function dataCompaniesCompanyIdAssessExcelGet($company_id, $report_type = null, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessExcelGet'][0])
    {
        list($response) = $this->dataCompaniesCompanyIdAssessExcelGetWithHttpInfo($company_id, $report_type, $contentType);
        return $response;
    }

    /**
     * Operation dataCompaniesCompanyIdAssessExcelGetWithHttpInfo
     *
     * Returns the status of the latest report requested.
     *
     * @param  string $company_id (required)
     * @param  string $report_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessExcelGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsAssessAssessExcelMeta, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataCompaniesCompanyIdAssessExcelGetWithHttpInfo($company_id, $report_type = null, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessExcelGet'][0])
    {
        $request = $this->dataCompaniesCompanyIdAssessExcelGetRequest($company_id, $report_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsAssessAssessExcelMeta' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsAssessAssessExcelMeta' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsAssessAssessExcelMeta', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsAssessAssessExcelMeta';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsAssessAssessExcelMeta',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dataCompaniesCompanyIdAssessExcelGetAsync
     *
     * Returns the status of the latest report requested.
     *
     * @param  string $company_id (required)
     * @param  string $report_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessExcelGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataCompaniesCompanyIdAssessExcelGetAsync($company_id, $report_type = null, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessExcelGet'][0])
    {
        return $this->dataCompaniesCompanyIdAssessExcelGetAsyncWithHttpInfo($company_id, $report_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataCompaniesCompanyIdAssessExcelGetAsyncWithHttpInfo
     *
     * Returns the status of the latest report requested.
     *
     * @param  string $company_id (required)
     * @param  string $report_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessExcelGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataCompaniesCompanyIdAssessExcelGetAsyncWithHttpInfo($company_id, $report_type = null, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessExcelGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsAssessAssessExcelMeta';
        $request = $this->dataCompaniesCompanyIdAssessExcelGetRequest($company_id, $report_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataCompaniesCompanyIdAssessExcelGet'
     *
     * @param  string $company_id (required)
     * @param  string $report_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessExcelGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataCompaniesCompanyIdAssessExcelGetRequest($company_id, $report_type = null, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessExcelGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling dataCompaniesCompanyIdAssessExcelGet'
            );
        }



        $resourcePath = '/data/companies/{companyId}/assess/excel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $report_type,
            'reportType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataCompaniesCompanyIdAssessExcelPost
     *
     * Request an Excel report for download.
     *
     * @param  string $company_id company_id (required)
     * @param  string $report_type report_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessExcelPost'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsAssessAssessExcelMeta
     */
    public function dataCompaniesCompanyIdAssessExcelPost($company_id, $report_type = null, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessExcelPost'][0])
    {
        list($response) = $this->dataCompaniesCompanyIdAssessExcelPostWithHttpInfo($company_id, $report_type, $contentType);
        return $response;
    }

    /**
     * Operation dataCompaniesCompanyIdAssessExcelPostWithHttpInfo
     *
     * Request an Excel report for download.
     *
     * @param  string $company_id (required)
     * @param  string $report_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessExcelPost'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsAssessAssessExcelMeta, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataCompaniesCompanyIdAssessExcelPostWithHttpInfo($company_id, $report_type = null, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessExcelPost'][0])
    {
        $request = $this->dataCompaniesCompanyIdAssessExcelPostRequest($company_id, $report_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsAssessAssessExcelMeta' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsAssessAssessExcelMeta' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsAssessAssessExcelMeta', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsAssessAssessExcelMeta';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsAssessAssessExcelMeta',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dataCompaniesCompanyIdAssessExcelPostAsync
     *
     * Request an Excel report for download.
     *
     * @param  string $company_id (required)
     * @param  string $report_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessExcelPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataCompaniesCompanyIdAssessExcelPostAsync($company_id, $report_type = null, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessExcelPost'][0])
    {
        return $this->dataCompaniesCompanyIdAssessExcelPostAsyncWithHttpInfo($company_id, $report_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataCompaniesCompanyIdAssessExcelPostAsyncWithHttpInfo
     *
     * Request an Excel report for download.
     *
     * @param  string $company_id (required)
     * @param  string $report_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessExcelPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataCompaniesCompanyIdAssessExcelPostAsyncWithHttpInfo($company_id, $report_type = null, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessExcelPost'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsAssessAssessExcelMeta';
        $request = $this->dataCompaniesCompanyIdAssessExcelPostRequest($company_id, $report_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataCompaniesCompanyIdAssessExcelPost'
     *
     * @param  string $company_id (required)
     * @param  string $report_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdAssessExcelPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataCompaniesCompanyIdAssessExcelPostRequest($company_id, $report_type = null, string $contentType = self::contentTypes['dataCompaniesCompanyIdAssessExcelPost'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling dataCompaniesCompanyIdAssessExcelPost'
            );
        }



        $resourcePath = '/data/companies/{companyId}/assess/excel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $report_type,
            'reportType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGet
     *
     * Gets the customer retention metrics for a specific company connection, over one or more periods of time.
     *
     * @param  string $company_id company_id (required)
     * @param  string $connection_id connection_id (required)
     * @param  \DateTime $report_date report_date (required)
     * @param  int $period_length period_length (required)
     * @param  int $number_of_periods number_of_periods (required)
     * @param  CodatAssessDataContractsCommerceMetricsPeriodUnit $period_unit period_unit (required)
     * @param  bool $include_display_names include_display_names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGet($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names = false, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGet'][0])
    {
        list($response) = $this->dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGetWithHttpInfo($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names, $contentType);
        return $response;
    }

    /**
     * Operation dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGetWithHttpInfo
     *
     * Gets the customer retention metrics for a specific company connection, over one or more periods of time.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  \DateTime $report_date (required)
     * @param  int $period_length (required)
     * @param  int $number_of_periods (required)
     * @param  CodatAssessDataContractsCommerceMetricsPeriodUnit $period_unit (required)
     * @param  bool $include_display_names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGetWithHttpInfo($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names = false, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGet'][0])
    {
        $request = $this->dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGetRequest($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGetAsync
     *
     * Gets the customer retention metrics for a specific company connection, over one or more periods of time.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  \DateTime $report_date (required)
     * @param  int $period_length (required)
     * @param  int $number_of_periods (required)
     * @param  CodatAssessDataContractsCommerceMetricsPeriodUnit $period_unit (required)
     * @param  bool $include_display_names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGetAsync($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names = false, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGet'][0])
    {
        return $this->dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGetAsyncWithHttpInfo($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGetAsyncWithHttpInfo
     *
     * Gets the customer retention metrics for a specific company connection, over one or more periods of time.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  \DateTime $report_date (required)
     * @param  int $period_length (required)
     * @param  int $number_of_periods (required)
     * @param  CodatAssessDataContractsCommerceMetricsPeriodUnit $period_unit (required)
     * @param  bool $include_display_names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGetAsyncWithHttpInfo($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names = false, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport';
        $request = $this->dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGetRequest($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGet'
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  \DateTime $report_date (required)
     * @param  int $period_length (required)
     * @param  int $number_of_periods (required)
     * @param  CodatAssessDataContractsCommerceMetricsPeriodUnit $period_unit (required)
     * @param  bool $include_display_names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGetRequest($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names = false, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGet'
            );
        }

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGet'
            );
        }

        // verify the required parameter 'report_date' is set
        if ($report_date === null || (is_array($report_date) && count($report_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $report_date when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGet'
            );
        }

        // verify the required parameter 'period_length' is set
        if ($period_length === null || (is_array($period_length) && count($period_length) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $period_length when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGet'
            );
        }

        // verify the required parameter 'number_of_periods' is set
        if ($number_of_periods === null || (is_array($number_of_periods) && count($number_of_periods) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number_of_periods when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGet'
            );
        }

        // verify the required parameter 'period_unit' is set
        if ($period_unit === null || (is_array($period_unit) && count($period_unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $period_unit when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsCustomerRetentionGet'
            );
        }



        $resourcePath = '/data/companies/{companyId}/connections/{connectionId}/assess/commerceMetrics/customerRetention';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $report_date,
            'reportDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_length,
            'periodLength', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_of_periods,
            'numberOfPeriods', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_unit,
            'periodUnit', // param base name
            'CodatAssessDataContractsCommerceMetricsPeriodUnit', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_display_names,
            'includeDisplayNames', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGet
     *
     * Gets the lifetime value metric for a specific company connection, over one or more periods of time.
     *
     * @param  string $company_id company_id (required)
     * @param  string $connection_id connection_id (required)
     * @param  \DateTime $report_date report_date (required)
     * @param  int $period_length period_length (required)
     * @param  int $number_of_periods number_of_periods (required)
     * @param  CodatAssessDataContractsCommerceMetricsPeriodUnit $period_unit period_unit (required)
     * @param  bool $include_display_names include_display_names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGet($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names = false, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGet'][0])
    {
        list($response) = $this->dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGetWithHttpInfo($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names, $contentType);
        return $response;
    }

    /**
     * Operation dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGetWithHttpInfo
     *
     * Gets the lifetime value metric for a specific company connection, over one or more periods of time.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  \DateTime $report_date (required)
     * @param  int $period_length (required)
     * @param  int $number_of_periods (required)
     * @param  CodatAssessDataContractsCommerceMetricsPeriodUnit $period_unit (required)
     * @param  bool $include_display_names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGetWithHttpInfo($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names = false, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGet'][0])
    {
        $request = $this->dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGetRequest($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGetAsync
     *
     * Gets the lifetime value metric for a specific company connection, over one or more periods of time.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  \DateTime $report_date (required)
     * @param  int $period_length (required)
     * @param  int $number_of_periods (required)
     * @param  CodatAssessDataContractsCommerceMetricsPeriodUnit $period_unit (required)
     * @param  bool $include_display_names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGetAsync($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names = false, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGet'][0])
    {
        return $this->dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGetAsyncWithHttpInfo($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGetAsyncWithHttpInfo
     *
     * Gets the lifetime value metric for a specific company connection, over one or more periods of time.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  \DateTime $report_date (required)
     * @param  int $period_length (required)
     * @param  int $number_of_periods (required)
     * @param  CodatAssessDataContractsCommerceMetricsPeriodUnit $period_unit (required)
     * @param  bool $include_display_names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGetAsyncWithHttpInfo($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names = false, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport';
        $request = $this->dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGetRequest($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGet'
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  \DateTime $report_date (required)
     * @param  int $period_length (required)
     * @param  int $number_of_periods (required)
     * @param  CodatAssessDataContractsCommerceMetricsPeriodUnit $period_unit (required)
     * @param  bool $include_display_names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGetRequest($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names = false, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGet'
            );
        }

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGet'
            );
        }

        // verify the required parameter 'report_date' is set
        if ($report_date === null || (is_array($report_date) && count($report_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $report_date when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGet'
            );
        }

        // verify the required parameter 'period_length' is set
        if ($period_length === null || (is_array($period_length) && count($period_length) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $period_length when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGet'
            );
        }

        // verify the required parameter 'number_of_periods' is set
        if ($number_of_periods === null || (is_array($number_of_periods) && count($number_of_periods) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number_of_periods when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGet'
            );
        }

        // verify the required parameter 'period_unit' is set
        if ($period_unit === null || (is_array($period_unit) && count($period_unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $period_unit when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsLifetimeValueGet'
            );
        }



        $resourcePath = '/data/companies/{companyId}/connections/{connectionId}/assess/commerceMetrics/lifetimeValue';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $report_date,
            'reportDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_length,
            'periodLength', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_of_periods,
            'numberOfPeriods', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_unit,
            'periodUnit', // param base name
            'CodatAssessDataContractsCommerceMetricsPeriodUnit', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_display_names,
            'includeDisplayNames', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGet
     *
     * Gets the order information for a specific company connection, over one or more periods of time.
     *
     * @param  string $company_id company_id (required)
     * @param  string $connection_id connection_id (required)
     * @param  \DateTime $report_date report_date (required)
     * @param  int $period_length period_length (required)
     * @param  int $number_of_periods number_of_periods (required)
     * @param  CodatAssessDataContractsCommerceMetricsPeriodUnit $period_unit period_unit (required)
     * @param  bool $include_display_names include_display_names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGet($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names = false, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGet'][0])
    {
        list($response) = $this->dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGetWithHttpInfo($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names, $contentType);
        return $response;
    }

    /**
     * Operation dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGetWithHttpInfo
     *
     * Gets the order information for a specific company connection, over one or more periods of time.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  \DateTime $report_date (required)
     * @param  int $period_length (required)
     * @param  int $number_of_periods (required)
     * @param  CodatAssessDataContractsCommerceMetricsPeriodUnit $period_unit (required)
     * @param  bool $include_display_names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGetWithHttpInfo($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names = false, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGet'][0])
    {
        $request = $this->dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGetRequest($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGetAsync
     *
     * Gets the order information for a specific company connection, over one or more periods of time.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  \DateTime $report_date (required)
     * @param  int $period_length (required)
     * @param  int $number_of_periods (required)
     * @param  CodatAssessDataContractsCommerceMetricsPeriodUnit $period_unit (required)
     * @param  bool $include_display_names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGetAsync($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names = false, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGet'][0])
    {
        return $this->dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGetAsyncWithHttpInfo($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGetAsyncWithHttpInfo
     *
     * Gets the order information for a specific company connection, over one or more periods of time.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  \DateTime $report_date (required)
     * @param  int $period_length (required)
     * @param  int $number_of_periods (required)
     * @param  CodatAssessDataContractsCommerceMetricsPeriodUnit $period_unit (required)
     * @param  bool $include_display_names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGetAsyncWithHttpInfo($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names = false, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport';
        $request = $this->dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGetRequest($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGet'
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  \DateTime $report_date (required)
     * @param  int $period_length (required)
     * @param  int $number_of_periods (required)
     * @param  CodatAssessDataContractsCommerceMetricsPeriodUnit $period_unit (required)
     * @param  bool $include_display_names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGetRequest($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names = false, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGet'
            );
        }

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGet'
            );
        }

        // verify the required parameter 'report_date' is set
        if ($report_date === null || (is_array($report_date) && count($report_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $report_date when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGet'
            );
        }

        // verify the required parameter 'period_length' is set
        if ($period_length === null || (is_array($period_length) && count($period_length) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $period_length when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGet'
            );
        }

        // verify the required parameter 'number_of_periods' is set
        if ($number_of_periods === null || (is_array($number_of_periods) && count($number_of_periods) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number_of_periods when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGet'
            );
        }

        // verify the required parameter 'period_unit' is set
        if ($period_unit === null || (is_array($period_unit) && count($period_unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $period_unit when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsOrdersGet'
            );
        }



        $resourcePath = '/data/companies/{companyId}/connections/{connectionId}/assess/commerceMetrics/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $report_date,
            'reportDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_length,
            'periodLength', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_of_periods,
            'numberOfPeriods', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_unit,
            'periodUnit', // param base name
            'CodatAssessDataContractsCommerceMetricsPeriodUnit', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_display_names,
            'includeDisplayNames', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGet
     *
     * Gets the refunds information for a specific company connection, over one or more periods of time.
     *
     * @param  string $company_id company_id (required)
     * @param  string $connection_id connection_id (required)
     * @param  \DateTime $report_date report_date (required)
     * @param  int $period_length period_length (required)
     * @param  int $number_of_periods number_of_periods (required)
     * @param  CodatAssessDataContractsCommerceMetricsPeriodUnit $period_unit period_unit (required)
     * @param  bool $include_display_names include_display_names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGet($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names = false, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGet'][0])
    {
        list($response) = $this->dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGetWithHttpInfo($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names, $contentType);
        return $response;
    }

    /**
     * Operation dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGetWithHttpInfo
     *
     * Gets the refunds information for a specific company connection, over one or more periods of time.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  \DateTime $report_date (required)
     * @param  int $period_length (required)
     * @param  int $number_of_periods (required)
     * @param  CodatAssessDataContractsCommerceMetricsPeriodUnit $period_unit (required)
     * @param  bool $include_display_names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGetWithHttpInfo($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names = false, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGet'][0])
    {
        $request = $this->dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGetRequest($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGetAsync
     *
     * Gets the refunds information for a specific company connection, over one or more periods of time.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  \DateTime $report_date (required)
     * @param  int $period_length (required)
     * @param  int $number_of_periods (required)
     * @param  CodatAssessDataContractsCommerceMetricsPeriodUnit $period_unit (required)
     * @param  bool $include_display_names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGetAsync($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names = false, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGet'][0])
    {
        return $this->dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGetAsyncWithHttpInfo($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGetAsyncWithHttpInfo
     *
     * Gets the refunds information for a specific company connection, over one or more periods of time.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  \DateTime $report_date (required)
     * @param  int $period_length (required)
     * @param  int $number_of_periods (required)
     * @param  CodatAssessDataContractsCommerceMetricsPeriodUnit $period_unit (required)
     * @param  bool $include_display_names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGetAsyncWithHttpInfo($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names = false, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport';
        $request = $this->dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGetRequest($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGet'
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  \DateTime $report_date (required)
     * @param  int $period_length (required)
     * @param  int $number_of_periods (required)
     * @param  CodatAssessDataContractsCommerceMetricsPeriodUnit $period_unit (required)
     * @param  bool $include_display_names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGetRequest($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names = false, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGet'
            );
        }

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGet'
            );
        }

        // verify the required parameter 'report_date' is set
        if ($report_date === null || (is_array($report_date) && count($report_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $report_date when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGet'
            );
        }

        // verify the required parameter 'period_length' is set
        if ($period_length === null || (is_array($period_length) && count($period_length) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $period_length when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGet'
            );
        }

        // verify the required parameter 'number_of_periods' is set
        if ($number_of_periods === null || (is_array($number_of_periods) && count($number_of_periods) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number_of_periods when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGet'
            );
        }

        // verify the required parameter 'period_unit' is set
        if ($period_unit === null || (is_array($period_unit) && count($period_unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $period_unit when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRefundsGet'
            );
        }



        $resourcePath = '/data/companies/{companyId}/connections/{connectionId}/assess/commerceMetrics/refunds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $report_date,
            'reportDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_length,
            'periodLength', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_of_periods,
            'numberOfPeriods', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_unit,
            'periodUnit', // param base name
            'CodatAssessDataContractsCommerceMetricsPeriodUnit', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_display_names,
            'includeDisplayNames', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGet
     *
     * Gets the revenue and revenue growth for a specific company connection, over one or more periods of time.
     *
     * @param  string $company_id company_id (required)
     * @param  string $connection_id connection_id (required)
     * @param  \DateTime $report_date report_date (required)
     * @param  int $period_length period_length (required)
     * @param  int $number_of_periods number_of_periods (required)
     * @param  CodatAssessDataContractsCommerceMetricsPeriodUnit $period_unit period_unit (required)
     * @param  bool $include_display_names include_display_names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGet($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names = false, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGet'][0])
    {
        list($response) = $this->dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGetWithHttpInfo($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names, $contentType);
        return $response;
    }

    /**
     * Operation dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGetWithHttpInfo
     *
     * Gets the revenue and revenue growth for a specific company connection, over one or more periods of time.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  \DateTime $report_date (required)
     * @param  int $period_length (required)
     * @param  int $number_of_periods (required)
     * @param  CodatAssessDataContractsCommerceMetricsPeriodUnit $period_unit (required)
     * @param  bool $include_display_names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGetWithHttpInfo($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names = false, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGet'][0])
    {
        $request = $this->dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGetRequest($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGetAsync
     *
     * Gets the revenue and revenue growth for a specific company connection, over one or more periods of time.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  \DateTime $report_date (required)
     * @param  int $period_length (required)
     * @param  int $number_of_periods (required)
     * @param  CodatAssessDataContractsCommerceMetricsPeriodUnit $period_unit (required)
     * @param  bool $include_display_names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGetAsync($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names = false, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGet'][0])
    {
        return $this->dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGetAsyncWithHttpInfo($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGetAsyncWithHttpInfo
     *
     * Gets the revenue and revenue growth for a specific company connection, over one or more periods of time.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  \DateTime $report_date (required)
     * @param  int $period_length (required)
     * @param  int $number_of_periods (required)
     * @param  CodatAssessDataContractsCommerceMetricsPeriodUnit $period_unit (required)
     * @param  bool $include_display_names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGetAsyncWithHttpInfo($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names = false, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport';
        $request = $this->dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGetRequest($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGet'
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  \DateTime $report_date (required)
     * @param  int $period_length (required)
     * @param  int $number_of_periods (required)
     * @param  CodatAssessDataContractsCommerceMetricsPeriodUnit $period_unit (required)
     * @param  bool $include_display_names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGetRequest($company_id, $connection_id, $report_date, $period_length, $number_of_periods, $period_unit, $include_display_names = false, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGet'
            );
        }

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGet'
            );
        }

        // verify the required parameter 'report_date' is set
        if ($report_date === null || (is_array($report_date) && count($report_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $report_date when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGet'
            );
        }

        // verify the required parameter 'period_length' is set
        if ($period_length === null || (is_array($period_length) && count($period_length) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $period_length when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGet'
            );
        }

        // verify the required parameter 'number_of_periods' is set
        if ($number_of_periods === null || (is_array($number_of_periods) && count($number_of_periods) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number_of_periods when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGet'
            );
        }

        // verify the required parameter 'period_unit' is set
        if ($period_unit === null || (is_array($period_unit) && count($period_unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $period_unit when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessCommerceMetricsRevenueGet'
            );
        }



        $resourcePath = '/data/companies/{companyId}/connections/{connectionId}/assess/commerceMetrics/revenue';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $report_date,
            'reportDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_length,
            'periodLength', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_of_periods,
            'numberOfPeriods', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_unit,
            'periodUnit', // param base name
            'CodatAssessDataContractsCommerceMetricsPeriodUnit', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_display_names,
            'includeDisplayNames', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsMrrGet
     *
     * Gets key metrics for subscription revenue.
     *
     * @param  string $company_id company_id (required)
     * @param  string $connection_id connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsMrrGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsMrrGet($company_id, $connection_id, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsMrrGet'][0])
    {
        list($response) = $this->dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsMrrGetWithHttpInfo($company_id, $connection_id, $contentType);
        return $response;
    }

    /**
     * Operation dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsMrrGetWithHttpInfo
     *
     * Gets key metrics for subscription revenue.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsMrrGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsMrrGetWithHttpInfo($company_id, $connection_id, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsMrrGet'][0])
    {
        $request = $this->dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsMrrGetRequest($company_id, $connection_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsMrrGetAsync
     *
     * Gets key metrics for subscription revenue.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsMrrGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsMrrGetAsync($company_id, $connection_id, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsMrrGet'][0])
    {
        return $this->dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsMrrGetAsyncWithHttpInfo($company_id, $connection_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsMrrGetAsyncWithHttpInfo
     *
     * Gets key metrics for subscription revenue.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsMrrGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsMrrGetAsyncWithHttpInfo($company_id, $connection_id, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsMrrGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatStandardReportingContractsReport';
        $request = $this->dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsMrrGetRequest($company_id, $connection_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsMrrGet'
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsMrrGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsMrrGetRequest($company_id, $connection_id, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsMrrGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsMrrGet'
            );
        }

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsMrrGet'
            );
        }


        $resourcePath = '/data/companies/{companyId}/connections/{connectionId}/assess/subscriptions/mrr';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsProcessGet
     *
     * Gets key metrics for subscription revenue.
     *
     * @param  string $company_id company_id (required)
     * @param  string $connection_id connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsProcessGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsProcessGet($company_id, $connection_id, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsProcessGet'][0])
    {
        $this->dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsProcessGetWithHttpInfo($company_id, $connection_id, $contentType);
    }

    /**
     * Operation dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsProcessGetWithHttpInfo
     *
     * Gets key metrics for subscription revenue.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsProcessGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsProcessGetWithHttpInfo($company_id, $connection_id, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsProcessGet'][0])
    {
        $request = $this->dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsProcessGetRequest($company_id, $connection_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsProcessGetAsync
     *
     * Gets key metrics for subscription revenue.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsProcessGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsProcessGetAsync($company_id, $connection_id, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsProcessGet'][0])
    {
        return $this->dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsProcessGetAsyncWithHttpInfo($company_id, $connection_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsProcessGetAsyncWithHttpInfo
     *
     * Gets key metrics for subscription revenue.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsProcessGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsProcessGetAsyncWithHttpInfo($company_id, $connection_id, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsProcessGet'][0])
    {
        $returnType = '';
        $request = $this->dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsProcessGetRequest($company_id, $connection_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsProcessGet'
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsProcessGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsProcessGetRequest($company_id, $connection_id, string $contentType = self::contentTypes['dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsProcessGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsProcessGet'
            );
        }

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling dataCompaniesCompanyIdConnectionsConnectionIdAssessSubscriptionsProcessGet'
            );
        }


        $resourcePath = '/data/companies/{companyId}/connections/{connectionId}/assess/subscriptions/process';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
