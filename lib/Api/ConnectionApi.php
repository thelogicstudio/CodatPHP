<?php
/**
 * ConnectionApi
 * PHP version 7.4
 *
 * @category Class
 * @package  TheLogicStudio\CodatPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Codat API
 *
 * [See our API changes](https://docs.codat.io/changelog)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TheLogicStudio\CodatPHP\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TheLogicStudio\CodatPHP\ApiException;
use TheLogicStudio\CodatPHP\Configuration;
use TheLogicStudio\CodatPHP\HeaderSelector;
use TheLogicStudio\CodatPHP\ObjectSerializer;

/**
 * ConnectionApi Class Doc Comment
 *
 * @category Class
 * @package  TheLogicStudio\CodatPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ConnectionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'companiesCompanyIdConnectionsConnectionIdAuthorizationPut' => [
            'application/json',
        ],
        'companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsBankAccountIdPatch' => [
            'application/json',
        ],
        'companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsGet' => [
            'application/json',
        ],
        'companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsPut' => [
            'application/json',
        ],
        'companiesCompanyIdConnectionsConnectionIdDelete' => [
            'application/json',
        ],
        'companiesCompanyIdConnectionsConnectionIdGet' => [
            'application/json',
        ],
        'companiesCompanyIdConnectionsConnectionIdPatch' => [
            'application/json',
        ],
        'companiesCompanyIdConnectionsGet' => [
            'application/json',
        ],
        'companiesCompanyIdConnectionsPost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdAuthorizationPut
     *
     * Put authorization information for a single data source connected to a single company.
     *
     * @param  string $company_id company_id (required)
     * @param  string $connection_id connection_id (required)
     * @param  array<string,mixed> $request_body request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdAuthorizationPut'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection
     */
    public function companiesCompanyIdConnectionsConnectionIdAuthorizationPut($company_id, $connection_id, $request_body = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdAuthorizationPut'][0])
    {
        list($response) = $this->companiesCompanyIdConnectionsConnectionIdAuthorizationPutWithHttpInfo($company_id, $connection_id, $request_body, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdAuthorizationPutWithHttpInfo
     *
     * Put authorization information for a single data source connected to a single company.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  array<string,mixed> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdAuthorizationPut'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdConnectionsConnectionIdAuthorizationPutWithHttpInfo($company_id, $connection_id, $request_body = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdAuthorizationPut'][0])
    {
        $request = $this->companiesCompanyIdConnectionsConnectionIdAuthorizationPutRequest($company_id, $connection_id, $request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdAuthorizationPutAsync
     *
     * Put authorization information for a single data source connected to a single company.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  array<string,mixed> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdAuthorizationPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdAuthorizationPutAsync($company_id, $connection_id, $request_body = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdAuthorizationPut'][0])
    {
        return $this->companiesCompanyIdConnectionsConnectionIdAuthorizationPutAsyncWithHttpInfo($company_id, $connection_id, $request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdAuthorizationPutAsyncWithHttpInfo
     *
     * Put authorization information for a single data source connected to a single company.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  array<string,mixed> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdAuthorizationPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdAuthorizationPutAsyncWithHttpInfo($company_id, $connection_id, $request_body = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdAuthorizationPut'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection';
        $request = $this->companiesCompanyIdConnectionsConnectionIdAuthorizationPutRequest($company_id, $connection_id, $request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdConnectionsConnectionIdAuthorizationPut'
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  array<string,mixed> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdAuthorizationPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdConnectionsConnectionIdAuthorizationPutRequest($company_id, $connection_id, $request_body = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdAuthorizationPut'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdConnectionsConnectionIdAuthorizationPut'
            );
        }

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling companiesCompanyIdConnectionsConnectionIdAuthorizationPut'
            );
        }



        $resourcePath = '/companies/{companyId}/connections/{connectionId}/authorization';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsBankAccountIdPatch
     *
     * Update a single BankFeed BankAccount for a single data source connected to a single company.
     *
     * @param  string $company_id company_id (required)
     * @param  string $connection_id connection_id (required)
     * @param  string $bank_account_id bank_account_id (required)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsBankAccountIdPatch'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount
     */
    public function companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsBankAccountIdPatch($company_id, $connection_id, $bank_account_id, $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsBankAccountIdPatch'][0])
    {
        list($response) = $this->companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsBankAccountIdPatchWithHttpInfo($company_id, $connection_id, $bank_account_id, $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsBankAccountIdPatchWithHttpInfo
     *
     * Update a single BankFeed BankAccount for a single data source connected to a single company.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $bank_account_id (required)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsBankAccountIdPatch'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsBankAccountIdPatchWithHttpInfo($company_id, $connection_id, $bank_account_id, $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsBankAccountIdPatch'][0])
    {
        $request = $this->companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsBankAccountIdPatchRequest($company_id, $connection_id, $bank_account_id, $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsBankAccountIdPatchAsync
     *
     * Update a single BankFeed BankAccount for a single data source connected to a single company.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $bank_account_id (required)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsBankAccountIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsBankAccountIdPatchAsync($company_id, $connection_id, $bank_account_id, $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsBankAccountIdPatch'][0])
    {
        return $this->companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsBankAccountIdPatchAsyncWithHttpInfo($company_id, $connection_id, $bank_account_id, $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsBankAccountIdPatchAsyncWithHttpInfo
     *
     * Update a single BankFeed BankAccount for a single data source connected to a single company.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $bank_account_id (required)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsBankAccountIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsBankAccountIdPatchAsyncWithHttpInfo($company_id, $connection_id, $bank_account_id, $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsBankAccountIdPatch'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount';
        $request = $this->companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsBankAccountIdPatchRequest($company_id, $connection_id, $bank_account_id, $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsBankAccountIdPatch'
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $bank_account_id (required)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsBankAccountIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsBankAccountIdPatchRequest($company_id, $connection_id, $bank_account_id, $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsBankAccountIdPatch'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsBankAccountIdPatch'
            );
        }

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsBankAccountIdPatch'
            );
        }

        // verify the required parameter 'bank_account_id' is set
        if ($bank_account_id === null || (is_array($bank_account_id) && count($bank_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_account_id when calling companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsBankAccountIdPatch'
            );
        }



        $resourcePath = '/companies/{companyId}/connections/{connectionId}/connectionInfo/bankFeedAccounts/{bankAccountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }
        // path params
        if ($bank_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'bankAccountId' . '}',
                ObjectSerializer::toPathValue($bank_account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account));
            } else {
                $httpBody = $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsGet
     *
     * Get BankFeed BankAccounts for a single data source connected to a single company.
     *
     * @param  string $company_id company_id (required)
     * @param  string $connection_id connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount[]
     */
    public function companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsGet($company_id, $connection_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsGet'][0])
    {
        list($response) = $this->companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsGetWithHttpInfo($company_id, $connection_id, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsGetWithHttpInfo
     *
     * Get BankFeed BankAccounts for a single data source connected to a single company.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount[], HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsGetWithHttpInfo($company_id, $connection_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsGet'][0])
    {
        $request = $this->companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsGetRequest($company_id, $connection_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsGetAsync
     *
     * Get BankFeed BankAccounts for a single data source connected to a single company.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsGetAsync($company_id, $connection_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsGet'][0])
    {
        return $this->companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsGetAsyncWithHttpInfo($company_id, $connection_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsGetAsyncWithHttpInfo
     *
     * Get BankFeed BankAccounts for a single data source connected to a single company.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsGetAsyncWithHttpInfo($company_id, $connection_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount[]';
        $request = $this->companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsGetRequest($company_id, $connection_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsGet'
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsGetRequest($company_id, $connection_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsGet'
            );
        }

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsGet'
            );
        }


        $resourcePath = '/companies/{companyId}/connections/{connectionId}/connectionInfo/bankFeedAccounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsPut
     *
     * Put BankFeed BankAccounts for a single data source connected to a single company.
     *
     * @param  string $company_id company_id (required)
     * @param  string $connection_id connection_id (required)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount[] $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsPut'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount[]
     */
    public function companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsPut($company_id, $connection_id, $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsPut'][0])
    {
        list($response) = $this->companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsPutWithHttpInfo($company_id, $connection_id, $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsPutWithHttpInfo
     *
     * Put BankFeed BankAccounts for a single data source connected to a single company.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount[] $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsPut'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount[], HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsPutWithHttpInfo($company_id, $connection_id, $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsPut'][0])
    {
        $request = $this->companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsPutRequest($company_id, $connection_id, $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsPutAsync
     *
     * Put BankFeed BankAccounts for a single data source connected to a single company.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount[] $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsPutAsync($company_id, $connection_id, $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsPut'][0])
    {
        return $this->companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsPutAsyncWithHttpInfo($company_id, $connection_id, $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsPutAsyncWithHttpInfo
     *
     * Put BankFeed BankAccounts for a single data source connected to a single company.
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount[] $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsPutAsyncWithHttpInfo($company_id, $connection_id, $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsPut'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount[]';
        $request = $this->companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsPutRequest($company_id, $connection_id, $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsPut'
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatStandardizationBankFeedsAccountsContractBankFeedBankAccount[] $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsPutRequest($company_id, $connection_id, $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsPut'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsPut'
            );
        }

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling companiesCompanyIdConnectionsConnectionIdConnectionInfoBankFeedAccountsPut'
            );
        }



        $resourcePath = '/companies/{companyId}/connections/{connectionId}/connectionInfo/bankFeedAccounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account));
            } else {
                $httpBody = $codat_standardization_bank_feeds_accounts_contract_bank_feed_bank_account;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdDelete
     *
     * Disconnect and delete a data source from a company
     *
     * @param  string $company_id company_id (required)
     * @param  string $connection_id connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDelete'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function companiesCompanyIdConnectionsConnectionIdDelete($company_id, $connection_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDelete'][0])
    {
        list($response) = $this->companiesCompanyIdConnectionsConnectionIdDeleteWithHttpInfo($company_id, $connection_id, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdDeleteWithHttpInfo
     *
     * Disconnect and delete a data source from a company
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDelete'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdConnectionsConnectionIdDeleteWithHttpInfo($company_id, $connection_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDelete'][0])
    {
        $request = $this->companiesCompanyIdConnectionsConnectionIdDeleteRequest($company_id, $connection_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdDeleteAsync
     *
     * Disconnect and delete a data source from a company
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdDeleteAsync($company_id, $connection_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDelete'][0])
    {
        return $this->companiesCompanyIdConnectionsConnectionIdDeleteAsyncWithHttpInfo($company_id, $connection_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdDeleteAsyncWithHttpInfo
     *
     * Disconnect and delete a data source from a company
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdDeleteAsyncWithHttpInfo($company_id, $connection_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDelete'][0])
    {
        $returnType = 'bool';
        $request = $this->companiesCompanyIdConnectionsConnectionIdDeleteRequest($company_id, $connection_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdConnectionsConnectionIdDelete'
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdConnectionsConnectionIdDeleteRequest($company_id, $connection_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdDelete'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdConnectionsConnectionIdDelete'
            );
        }

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling companiesCompanyIdConnectionsConnectionIdDelete'
            );
        }


        $resourcePath = '/companies/{companyId}/connections/{connectionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdGet
     *
     * Retrieve a single data source connected to a single company, including its connection status
     *
     * @param  string $company_id company_id (required)
     * @param  string $connection_id connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection
     */
    public function companiesCompanyIdConnectionsConnectionIdGet($company_id, $connection_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdGet'][0])
    {
        list($response) = $this->companiesCompanyIdConnectionsConnectionIdGetWithHttpInfo($company_id, $connection_id, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdGetWithHttpInfo
     *
     * Retrieve a single data source connected to a single company, including its connection status
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdConnectionsConnectionIdGetWithHttpInfo($company_id, $connection_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdGet'][0])
    {
        $request = $this->companiesCompanyIdConnectionsConnectionIdGetRequest($company_id, $connection_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdGetAsync
     *
     * Retrieve a single data source connected to a single company, including its connection status
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdGetAsync($company_id, $connection_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdGet'][0])
    {
        return $this->companiesCompanyIdConnectionsConnectionIdGetAsyncWithHttpInfo($company_id, $connection_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdGetAsyncWithHttpInfo
     *
     * Retrieve a single data source connected to a single company, including its connection status
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdGetAsyncWithHttpInfo($company_id, $connection_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection';
        $request = $this->companiesCompanyIdConnectionsConnectionIdGetRequest($company_id, $connection_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdConnectionsConnectionIdGet'
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdConnectionsConnectionIdGetRequest($company_id, $connection_id, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdConnectionsConnectionIdGet'
            );
        }

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling companiesCompanyIdConnectionsConnectionIdGet'
            );
        }


        $resourcePath = '/companies/{companyId}/connections/{connectionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdPatch
     *
     * Disconnect a data source from a company
     *
     * @param  string $company_id company_id (required)
     * @param  string $connection_id connection_id (required)
     * @param  \TheLogicStudio\CodatPHP\Model\CompaniesCompanyIdConnectionsConnectionIdPatchRequest $companies_company_id_connections_connection_id_patch_request companies_company_id_connections_connection_id_patch_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPatch'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection
     */
    public function companiesCompanyIdConnectionsConnectionIdPatch($company_id, $connection_id, $companies_company_id_connections_connection_id_patch_request = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPatch'][0])
    {
        list($response) = $this->companiesCompanyIdConnectionsConnectionIdPatchWithHttpInfo($company_id, $connection_id, $companies_company_id_connections_connection_id_patch_request, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdPatchWithHttpInfo
     *
     * Disconnect a data source from a company
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  \TheLogicStudio\CodatPHP\Model\CompaniesCompanyIdConnectionsConnectionIdPatchRequest $companies_company_id_connections_connection_id_patch_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPatch'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdConnectionsConnectionIdPatchWithHttpInfo($company_id, $connection_id, $companies_company_id_connections_connection_id_patch_request = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPatch'][0])
    {
        $request = $this->companiesCompanyIdConnectionsConnectionIdPatchRequest($company_id, $connection_id, $companies_company_id_connections_connection_id_patch_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdPatchAsync
     *
     * Disconnect a data source from a company
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  \TheLogicStudio\CodatPHP\Model\CompaniesCompanyIdConnectionsConnectionIdPatchRequest $companies_company_id_connections_connection_id_patch_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdPatchAsync($company_id, $connection_id, $companies_company_id_connections_connection_id_patch_request = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPatch'][0])
    {
        return $this->companiesCompanyIdConnectionsConnectionIdPatchAsyncWithHttpInfo($company_id, $connection_id, $companies_company_id_connections_connection_id_patch_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdConnectionsConnectionIdPatchAsyncWithHttpInfo
     *
     * Disconnect a data source from a company
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  \TheLogicStudio\CodatPHP\Model\CompaniesCompanyIdConnectionsConnectionIdPatchRequest $companies_company_id_connections_connection_id_patch_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsConnectionIdPatchAsyncWithHttpInfo($company_id, $connection_id, $companies_company_id_connections_connection_id_patch_request = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPatch'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection';
        $request = $this->companiesCompanyIdConnectionsConnectionIdPatchRequest($company_id, $connection_id, $companies_company_id_connections_connection_id_patch_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdConnectionsConnectionIdPatch'
     *
     * @param  string $company_id (required)
     * @param  string $connection_id (required)
     * @param  \TheLogicStudio\CodatPHP\Model\CompaniesCompanyIdConnectionsConnectionIdPatchRequest $companies_company_id_connections_connection_id_patch_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsConnectionIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdConnectionsConnectionIdPatchRequest($company_id, $connection_id, $companies_company_id_connections_connection_id_patch_request = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsConnectionIdPatch'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdConnectionsConnectionIdPatch'
            );
        }

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling companiesCompanyIdConnectionsConnectionIdPatch'
            );
        }



        $resourcePath = '/companies/{companyId}/connections/{connectionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($companies_company_id_connections_connection_id_patch_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($companies_company_id_connections_connection_id_patch_request));
            } else {
                $httpBody = $companies_company_id_connections_connection_id_patch_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdConnectionsGet
     *
     * Retrieve all data sources connected to a single company, including their connection statuses
     *
     * @param  string $company_id company_id (required)
     * @param  int $page page (required)
     * @param  int $page_size page_size (optional, default to 100)
     * @param  string $query query (optional)
     * @param  string $order_by order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnectionPagedResponseModel
     */
    public function companiesCompanyIdConnectionsGet($company_id, $page, $page_size = 100, $query = null, $order_by = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsGet'][0])
    {
        list($response) = $this->companiesCompanyIdConnectionsGetWithHttpInfo($company_id, $page, $page_size, $query, $order_by, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdConnectionsGetWithHttpInfo
     *
     * Retrieve all data sources connected to a single company, including their connection statuses
     *
     * @param  string $company_id (required)
     * @param  int $page (required)
     * @param  int $page_size (optional, default to 100)
     * @param  string $query (optional)
     * @param  string $order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnectionPagedResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdConnectionsGetWithHttpInfo($company_id, $page, $page_size = 100, $query = null, $order_by = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsGet'][0])
    {
        $request = $this->companiesCompanyIdConnectionsGetRequest($company_id, $page, $page_size, $query, $order_by, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnectionPagedResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnectionPagedResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnectionPagedResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnectionPagedResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnectionPagedResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdConnectionsGetAsync
     *
     * Retrieve all data sources connected to a single company, including their connection statuses
     *
     * @param  string $company_id (required)
     * @param  int $page (required)
     * @param  int $page_size (optional, default to 100)
     * @param  string $query (optional)
     * @param  string $order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsGetAsync($company_id, $page, $page_size = 100, $query = null, $order_by = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsGet'][0])
    {
        return $this->companiesCompanyIdConnectionsGetAsyncWithHttpInfo($company_id, $page, $page_size, $query, $order_by, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdConnectionsGetAsyncWithHttpInfo
     *
     * Retrieve all data sources connected to a single company, including their connection statuses
     *
     * @param  string $company_id (required)
     * @param  int $page (required)
     * @param  int $page_size (optional, default to 100)
     * @param  string $query (optional)
     * @param  string $order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsGetAsyncWithHttpInfo($company_id, $page, $page_size = 100, $query = null, $order_by = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnectionPagedResponseModel';
        $request = $this->companiesCompanyIdConnectionsGetRequest($company_id, $page, $page_size, $query, $order_by, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdConnectionsGet'
     *
     * @param  string $company_id (required)
     * @param  int $page (required)
     * @param  int $page_size (optional, default to 100)
     * @param  string $query (optional)
     * @param  string $order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdConnectionsGetRequest($company_id, $page, $page_size = 100, $query = null, $order_by = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsGet'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdConnectionsGet'
            );
        }

        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling companiesCompanyIdConnectionsGet'
            );
        }





        $resourcePath = '/companies/{companyId}/connections';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'orderBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesCompanyIdConnectionsPost
     *
     * Connect a data source to a company
     *
     * @param  string $company_id company_id (required)
     * @param  \TheLogicStudio\CodatPHP\Model\CompaniesCompanyIdConnectionsPostRequest $companies_company_id_connections_post_request companies_company_id_connections_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsPost'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection
     */
    public function companiesCompanyIdConnectionsPost($company_id, $companies_company_id_connections_post_request = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsPost'][0])
    {
        list($response) = $this->companiesCompanyIdConnectionsPostWithHttpInfo($company_id, $companies_company_id_connections_post_request, $contentType);
        return $response;
    }

    /**
     * Operation companiesCompanyIdConnectionsPostWithHttpInfo
     *
     * Connect a data source to a company
     *
     * @param  string $company_id (required)
     * @param  \TheLogicStudio\CodatPHP\Model\CompaniesCompanyIdConnectionsPostRequest $companies_company_id_connections_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsPost'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection, HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesCompanyIdConnectionsPostWithHttpInfo($company_id, $companies_company_id_connections_post_request = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsPost'][0])
    {
        $request = $this->companiesCompanyIdConnectionsPostRequest($company_id, $companies_company_id_connections_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdConnectionsPostAsync
     *
     * Connect a data source to a company
     *
     * @param  string $company_id (required)
     * @param  \TheLogicStudio\CodatPHP\Model\CompaniesCompanyIdConnectionsPostRequest $companies_company_id_connections_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsPostAsync($company_id, $companies_company_id_connections_post_request = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsPost'][0])
    {
        return $this->companiesCompanyIdConnectionsPostAsyncWithHttpInfo($company_id, $companies_company_id_connections_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesCompanyIdConnectionsPostAsyncWithHttpInfo
     *
     * Connect a data source to a company
     *
     * @param  string $company_id (required)
     * @param  \TheLogicStudio\CodatPHP\Model\CompaniesCompanyIdConnectionsPostRequest $companies_company_id_connections_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companiesCompanyIdConnectionsPostAsyncWithHttpInfo($company_id, $companies_company_id_connections_post_request = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsPost'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsCompanyDataConnection';
        $request = $this->companiesCompanyIdConnectionsPostRequest($company_id, $companies_company_id_connections_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesCompanyIdConnectionsPost'
     *
     * @param  string $company_id (required)
     * @param  \TheLogicStudio\CodatPHP\Model\CompaniesCompanyIdConnectionsPostRequest $companies_company_id_connections_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesCompanyIdConnectionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesCompanyIdConnectionsPostRequest($company_id, $companies_company_id_connections_post_request = null, string $contentType = self::contentTypes['companiesCompanyIdConnectionsPost'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling companiesCompanyIdConnectionsPost'
            );
        }



        $resourcePath = '/companies/{companyId}/connections';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($companies_company_id_connections_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($companies_company_id_connections_post_request));
            } else {
                $httpBody = $companies_company_id_connections_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
