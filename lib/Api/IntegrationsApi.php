<?php
/**
 * IntegrationsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  TheLogicStudio\CodatPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Codat API
 *
 * [See our API changes](https://docs.codat.io/changelog)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TheLogicStudio\CodatPHP\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TheLogicStudio\CodatPHP\ApiException;
use TheLogicStudio\CodatPHP\Configuration;
use TheLogicStudio\CodatPHP\HeaderSelector;
use TheLogicStudio\CodatPHP\ObjectSerializer;

/**
 * IntegrationsApi Class Doc Comment
 *
 * @category Class
 * @package  TheLogicStudio\CodatPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class IntegrationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'integrationsBankSettingsGet' => [
            'application/json',
        ],
        'integrationsBankSettingsPut' => [
            'application/json',
        ],
        'integrationsCredentialsPlatformKeyDelete' => [
            'application/json',
        ],
        'integrationsCredentialsPlatformKeyGet' => [
            'application/json',
        ],
        'integrationsCredentialsPlatformKeyPut' => [
            'application/json',
        ],
        'integrationsGet' => [
            'application/json',
        ],
        'integrationsPlatformKeyBrandingGet' => [
            'application/json',
        ],
        'integrationsPlatformKeyEnabledPut' => [
            'application/json',
        ],
        'integrationsPlatformKeyGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation integrationsBankSettingsGet
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsBankSettingsGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsBankingSettingsModelsBankSettingsDataset
     */
    public function integrationsBankSettingsGet(string $contentType = self::contentTypes['integrationsBankSettingsGet'][0])
    {
        list($response) = $this->integrationsBankSettingsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation integrationsBankSettingsGetWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsBankSettingsGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsBankingSettingsModelsBankSettingsDataset, HTTP status code, HTTP response headers (array of strings)
     */
    public function integrationsBankSettingsGetWithHttpInfo(string $contentType = self::contentTypes['integrationsBankSettingsGet'][0])
    {
        $request = $this->integrationsBankSettingsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsBankingSettingsModelsBankSettingsDataset' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsBankingSettingsModelsBankSettingsDataset' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsBankingSettingsModelsBankSettingsDataset', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsBankingSettingsModelsBankSettingsDataset';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsBankingSettingsModelsBankSettingsDataset',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation integrationsBankSettingsGetAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsBankSettingsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function integrationsBankSettingsGetAsync(string $contentType = self::contentTypes['integrationsBankSettingsGet'][0])
    {
        return $this->integrationsBankSettingsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation integrationsBankSettingsGetAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsBankSettingsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function integrationsBankSettingsGetAsyncWithHttpInfo(string $contentType = self::contentTypes['integrationsBankSettingsGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsBankingSettingsModelsBankSettingsDataset';
        $request = $this->integrationsBankSettingsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'integrationsBankSettingsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsBankSettingsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function integrationsBankSettingsGetRequest(string $contentType = self::contentTypes['integrationsBankSettingsGet'][0])
    {


        $resourcePath = '/integrations/bankSettings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation integrationsBankSettingsPut
     *
     * @param  \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsBankingSettingsModelsBankSettingsDataset $codat_public_api_models_clients_banking_settings_models_bank_settings_dataset codat_public_api_models_clients_banking_settings_models_bank_settings_dataset (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsBankSettingsPut'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsBankingSettingsModelsBankSettingsDataset
     */
    public function integrationsBankSettingsPut($codat_public_api_models_clients_banking_settings_models_bank_settings_dataset = null, string $contentType = self::contentTypes['integrationsBankSettingsPut'][0])
    {
        list($response) = $this->integrationsBankSettingsPutWithHttpInfo($codat_public_api_models_clients_banking_settings_models_bank_settings_dataset, $contentType);
        return $response;
    }

    /**
     * Operation integrationsBankSettingsPutWithHttpInfo
     *
     * @param  \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsBankingSettingsModelsBankSettingsDataset $codat_public_api_models_clients_banking_settings_models_bank_settings_dataset (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsBankSettingsPut'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsBankingSettingsModelsBankSettingsDataset, HTTP status code, HTTP response headers (array of strings)
     */
    public function integrationsBankSettingsPutWithHttpInfo($codat_public_api_models_clients_banking_settings_models_bank_settings_dataset = null, string $contentType = self::contentTypes['integrationsBankSettingsPut'][0])
    {
        $request = $this->integrationsBankSettingsPutRequest($codat_public_api_models_clients_banking_settings_models_bank_settings_dataset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsBankingSettingsModelsBankSettingsDataset' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsBankingSettingsModelsBankSettingsDataset' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsBankingSettingsModelsBankSettingsDataset', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsBankingSettingsModelsBankSettingsDataset';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsBankingSettingsModelsBankSettingsDataset',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation integrationsBankSettingsPutAsync
     *
     * @param  \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsBankingSettingsModelsBankSettingsDataset $codat_public_api_models_clients_banking_settings_models_bank_settings_dataset (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsBankSettingsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function integrationsBankSettingsPutAsync($codat_public_api_models_clients_banking_settings_models_bank_settings_dataset = null, string $contentType = self::contentTypes['integrationsBankSettingsPut'][0])
    {
        return $this->integrationsBankSettingsPutAsyncWithHttpInfo($codat_public_api_models_clients_banking_settings_models_bank_settings_dataset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation integrationsBankSettingsPutAsyncWithHttpInfo
     *
     * @param  \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsBankingSettingsModelsBankSettingsDataset $codat_public_api_models_clients_banking_settings_models_bank_settings_dataset (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsBankSettingsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function integrationsBankSettingsPutAsyncWithHttpInfo($codat_public_api_models_clients_banking_settings_models_bank_settings_dataset = null, string $contentType = self::contentTypes['integrationsBankSettingsPut'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsBankingSettingsModelsBankSettingsDataset';
        $request = $this->integrationsBankSettingsPutRequest($codat_public_api_models_clients_banking_settings_models_bank_settings_dataset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'integrationsBankSettingsPut'
     *
     * @param  \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsBankingSettingsModelsBankSettingsDataset $codat_public_api_models_clients_banking_settings_models_bank_settings_dataset (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsBankSettingsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function integrationsBankSettingsPutRequest($codat_public_api_models_clients_banking_settings_models_bank_settings_dataset = null, string $contentType = self::contentTypes['integrationsBankSettingsPut'][0])
    {



        $resourcePath = '/integrations/bankSettings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($codat_public_api_models_clients_banking_settings_models_bank_settings_dataset)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($codat_public_api_models_clients_banking_settings_models_bank_settings_dataset));
            } else {
                $httpBody = $codat_public_api_models_clients_banking_settings_models_bank_settings_dataset;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation integrationsCredentialsPlatformKeyDelete
     *
     * Delete credentials used to authenticate with an accounting platform
     *
     * @param  string $platform_key platform_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsCredentialsPlatformKeyDelete'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array<string,mixed>
     */
    public function integrationsCredentialsPlatformKeyDelete($platform_key, string $contentType = self::contentTypes['integrationsCredentialsPlatformKeyDelete'][0])
    {
        list($response) = $this->integrationsCredentialsPlatformKeyDeleteWithHttpInfo($platform_key, $contentType);
        return $response;
    }

    /**
     * Operation integrationsCredentialsPlatformKeyDeleteWithHttpInfo
     *
     * Delete credentials used to authenticate with an accounting platform
     *
     * @param  string $platform_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsCredentialsPlatformKeyDelete'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>, HTTP status code, HTTP response headers (array of strings)
     */
    public function integrationsCredentialsPlatformKeyDeleteWithHttpInfo($platform_key, string $contentType = self::contentTypes['integrationsCredentialsPlatformKeyDelete'][0])
    {
        $request = $this->integrationsCredentialsPlatformKeyDeleteRequest($platform_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('array<string,mixed>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,mixed>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,mixed>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'array<string,mixed>';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation integrationsCredentialsPlatformKeyDeleteAsync
     *
     * Delete credentials used to authenticate with an accounting platform
     *
     * @param  string $platform_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsCredentialsPlatformKeyDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function integrationsCredentialsPlatformKeyDeleteAsync($platform_key, string $contentType = self::contentTypes['integrationsCredentialsPlatformKeyDelete'][0])
    {
        return $this->integrationsCredentialsPlatformKeyDeleteAsyncWithHttpInfo($platform_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation integrationsCredentialsPlatformKeyDeleteAsyncWithHttpInfo
     *
     * Delete credentials used to authenticate with an accounting platform
     *
     * @param  string $platform_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsCredentialsPlatformKeyDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function integrationsCredentialsPlatformKeyDeleteAsyncWithHttpInfo($platform_key, string $contentType = self::contentTypes['integrationsCredentialsPlatformKeyDelete'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->integrationsCredentialsPlatformKeyDeleteRequest($platform_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'integrationsCredentialsPlatformKeyDelete'
     *
     * @param  string $platform_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsCredentialsPlatformKeyDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function integrationsCredentialsPlatformKeyDeleteRequest($platform_key, string $contentType = self::contentTypes['integrationsCredentialsPlatformKeyDelete'][0])
    {

        // verify the required parameter 'platform_key' is set
        if ($platform_key === null || (is_array($platform_key) && count($platform_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform_key when calling integrationsCredentialsPlatformKeyDelete'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9_]*$/", $platform_key)) {
            throw new \InvalidArgumentException("invalid value for \"platform_key\" when calling IntegrationsApi.integrationsCredentialsPlatformKeyDelete, must conform to the pattern /^[a-zA-Z0-9_]*$/.");
        }
        

        $resourcePath = '/integrations/credentials/{platformKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($platform_key !== null) {
            $resourcePath = str_replace(
                '{' . 'platformKey' . '}',
                ObjectSerializer::toPathValue($platform_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation integrationsCredentialsPlatformKeyGet
     *
     * Fetch credentials required to authenticate with an accounting platform.
     *
     * @param  string $platform_key platform_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsCredentialsPlatformKeyGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array<string,mixed>
     */
    public function integrationsCredentialsPlatformKeyGet($platform_key, string $contentType = self::contentTypes['integrationsCredentialsPlatformKeyGet'][0])
    {
        list($response) = $this->integrationsCredentialsPlatformKeyGetWithHttpInfo($platform_key, $contentType);
        return $response;
    }

    /**
     * Operation integrationsCredentialsPlatformKeyGetWithHttpInfo
     *
     * Fetch credentials required to authenticate with an accounting platform.
     *
     * @param  string $platform_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsCredentialsPlatformKeyGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>, HTTP status code, HTTP response headers (array of strings)
     */
    public function integrationsCredentialsPlatformKeyGetWithHttpInfo($platform_key, string $contentType = self::contentTypes['integrationsCredentialsPlatformKeyGet'][0])
    {
        $request = $this->integrationsCredentialsPlatformKeyGetRequest($platform_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('array<string,mixed>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,mixed>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,mixed>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'array<string,mixed>';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation integrationsCredentialsPlatformKeyGetAsync
     *
     * Fetch credentials required to authenticate with an accounting platform.
     *
     * @param  string $platform_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsCredentialsPlatformKeyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function integrationsCredentialsPlatformKeyGetAsync($platform_key, string $contentType = self::contentTypes['integrationsCredentialsPlatformKeyGet'][0])
    {
        return $this->integrationsCredentialsPlatformKeyGetAsyncWithHttpInfo($platform_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation integrationsCredentialsPlatformKeyGetAsyncWithHttpInfo
     *
     * Fetch credentials required to authenticate with an accounting platform.
     *
     * @param  string $platform_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsCredentialsPlatformKeyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function integrationsCredentialsPlatformKeyGetAsyncWithHttpInfo($platform_key, string $contentType = self::contentTypes['integrationsCredentialsPlatformKeyGet'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->integrationsCredentialsPlatformKeyGetRequest($platform_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'integrationsCredentialsPlatformKeyGet'
     *
     * @param  string $platform_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsCredentialsPlatformKeyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function integrationsCredentialsPlatformKeyGetRequest($platform_key, string $contentType = self::contentTypes['integrationsCredentialsPlatformKeyGet'][0])
    {

        // verify the required parameter 'platform_key' is set
        if ($platform_key === null || (is_array($platform_key) && count($platform_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform_key when calling integrationsCredentialsPlatformKeyGet'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9_]*$/", $platform_key)) {
            throw new \InvalidArgumentException("invalid value for \"platform_key\" when calling IntegrationsApi.integrationsCredentialsPlatformKeyGet, must conform to the pattern /^[a-zA-Z0-9_]*$/.");
        }
        

        $resourcePath = '/integrations/credentials/{platformKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($platform_key !== null) {
            $resourcePath = str_replace(
                '{' . 'platformKey' . '}',
                ObjectSerializer::toPathValue($platform_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation integrationsCredentialsPlatformKeyPut
     *
     * Update credentials required to authenticate with an accounting platform
     *
     * @param  string $platform_key platform_key (required)
     * @param  array<string,string> $request_body request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsCredentialsPlatformKeyPut'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array<string,mixed>
     */
    public function integrationsCredentialsPlatformKeyPut($platform_key, $request_body = null, string $contentType = self::contentTypes['integrationsCredentialsPlatformKeyPut'][0])
    {
        list($response) = $this->integrationsCredentialsPlatformKeyPutWithHttpInfo($platform_key, $request_body, $contentType);
        return $response;
    }

    /**
     * Operation integrationsCredentialsPlatformKeyPutWithHttpInfo
     *
     * Update credentials required to authenticate with an accounting platform
     *
     * @param  string $platform_key (required)
     * @param  array<string,string> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsCredentialsPlatformKeyPut'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>, HTTP status code, HTTP response headers (array of strings)
     */
    public function integrationsCredentialsPlatformKeyPutWithHttpInfo($platform_key, $request_body = null, string $contentType = self::contentTypes['integrationsCredentialsPlatformKeyPut'][0])
    {
        $request = $this->integrationsCredentialsPlatformKeyPutRequest($platform_key, $request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('array<string,mixed>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,mixed>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,mixed>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'array<string,mixed>';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation integrationsCredentialsPlatformKeyPutAsync
     *
     * Update credentials required to authenticate with an accounting platform
     *
     * @param  string $platform_key (required)
     * @param  array<string,string> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsCredentialsPlatformKeyPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function integrationsCredentialsPlatformKeyPutAsync($platform_key, $request_body = null, string $contentType = self::contentTypes['integrationsCredentialsPlatformKeyPut'][0])
    {
        return $this->integrationsCredentialsPlatformKeyPutAsyncWithHttpInfo($platform_key, $request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation integrationsCredentialsPlatformKeyPutAsyncWithHttpInfo
     *
     * Update credentials required to authenticate with an accounting platform
     *
     * @param  string $platform_key (required)
     * @param  array<string,string> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsCredentialsPlatformKeyPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function integrationsCredentialsPlatformKeyPutAsyncWithHttpInfo($platform_key, $request_body = null, string $contentType = self::contentTypes['integrationsCredentialsPlatformKeyPut'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->integrationsCredentialsPlatformKeyPutRequest($platform_key, $request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'integrationsCredentialsPlatformKeyPut'
     *
     * @param  string $platform_key (required)
     * @param  array<string,string> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsCredentialsPlatformKeyPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function integrationsCredentialsPlatformKeyPutRequest($platform_key, $request_body = null, string $contentType = self::contentTypes['integrationsCredentialsPlatformKeyPut'][0])
    {

        // verify the required parameter 'platform_key' is set
        if ($platform_key === null || (is_array($platform_key) && count($platform_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform_key when calling integrationsCredentialsPlatformKeyPut'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9_]*$/", $platform_key)) {
            throw new \InvalidArgumentException("invalid value for \"platform_key\" when calling IntegrationsApi.integrationsCredentialsPlatformKeyPut, must conform to the pattern /^[a-zA-Z0-9_]*$/.");
        }
        


        $resourcePath = '/integrations/credentials/{platformKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($platform_key !== null) {
            $resourcePath = str_replace(
                '{' . 'platformKey' . '}',
                ObjectSerializer::toPathValue($platform_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation integrationsGet
     *
     * @param  int $page page (required)
     * @param  int $page_size page_size (optional, default to 100)
     * @param  string $query query (optional)
     * @param  string $order_by order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsPlatformSourceModelPagedResponseModel
     */
    public function integrationsGet($page, $page_size = 100, $query = null, $order_by = null, string $contentType = self::contentTypes['integrationsGet'][0])
    {
        list($response) = $this->integrationsGetWithHttpInfo($page, $page_size, $query, $order_by, $contentType);
        return $response;
    }

    /**
     * Operation integrationsGetWithHttpInfo
     *
     * @param  int $page (required)
     * @param  int $page_size (optional, default to 100)
     * @param  string $query (optional)
     * @param  string $order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsPlatformSourceModelPagedResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function integrationsGetWithHttpInfo($page, $page_size = 100, $query = null, $order_by = null, string $contentType = self::contentTypes['integrationsGet'][0])
    {
        $request = $this->integrationsGetRequest($page, $page_size, $query, $order_by, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsPlatformSourceModelPagedResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsPlatformSourceModelPagedResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsPlatformSourceModelPagedResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsPlatformSourceModelPagedResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsPlatformSourceModelPagedResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation integrationsGetAsync
     *
     * @param  int $page (required)
     * @param  int $page_size (optional, default to 100)
     * @param  string $query (optional)
     * @param  string $order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function integrationsGetAsync($page, $page_size = 100, $query = null, $order_by = null, string $contentType = self::contentTypes['integrationsGet'][0])
    {
        return $this->integrationsGetAsyncWithHttpInfo($page, $page_size, $query, $order_by, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation integrationsGetAsyncWithHttpInfo
     *
     * @param  int $page (required)
     * @param  int $page_size (optional, default to 100)
     * @param  string $query (optional)
     * @param  string $order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function integrationsGetAsyncWithHttpInfo($page, $page_size = 100, $query = null, $order_by = null, string $contentType = self::contentTypes['integrationsGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsPlatformSourceModelPagedResponseModel';
        $request = $this->integrationsGetRequest($page, $page_size, $query, $order_by, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'integrationsGet'
     *
     * @param  int $page (required)
     * @param  int $page_size (optional, default to 100)
     * @param  string $query (optional)
     * @param  string $order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function integrationsGetRequest($page, $page_size = 100, $query = null, $order_by = null, string $contentType = self::contentTypes['integrationsGet'][0])
    {

        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling integrationsGet'
            );
        }





        $resourcePath = '/integrations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'orderBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation integrationsPlatformKeyBrandingGet
     *
     * @param  string $platform_key platform_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsPlatformKeyBrandingGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsIntegrationBrandingModel
     */
    public function integrationsPlatformKeyBrandingGet($platform_key, string $contentType = self::contentTypes['integrationsPlatformKeyBrandingGet'][0])
    {
        list($response) = $this->integrationsPlatformKeyBrandingGetWithHttpInfo($platform_key, $contentType);
        return $response;
    }

    /**
     * Operation integrationsPlatformKeyBrandingGetWithHttpInfo
     *
     * @param  string $platform_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsPlatformKeyBrandingGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsIntegrationBrandingModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function integrationsPlatformKeyBrandingGetWithHttpInfo($platform_key, string $contentType = self::contentTypes['integrationsPlatformKeyBrandingGet'][0])
    {
        $request = $this->integrationsPlatformKeyBrandingGetRequest($platform_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsIntegrationBrandingModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsIntegrationBrandingModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsIntegrationBrandingModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsIntegrationBrandingModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsIntegrationBrandingModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation integrationsPlatformKeyBrandingGetAsync
     *
     * @param  string $platform_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsPlatformKeyBrandingGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function integrationsPlatformKeyBrandingGetAsync($platform_key, string $contentType = self::contentTypes['integrationsPlatformKeyBrandingGet'][0])
    {
        return $this->integrationsPlatformKeyBrandingGetAsyncWithHttpInfo($platform_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation integrationsPlatformKeyBrandingGetAsyncWithHttpInfo
     *
     * @param  string $platform_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsPlatformKeyBrandingGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function integrationsPlatformKeyBrandingGetAsyncWithHttpInfo($platform_key, string $contentType = self::contentTypes['integrationsPlatformKeyBrandingGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsClientsIntegrationBrandingModel';
        $request = $this->integrationsPlatformKeyBrandingGetRequest($platform_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'integrationsPlatformKeyBrandingGet'
     *
     * @param  string $platform_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsPlatformKeyBrandingGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function integrationsPlatformKeyBrandingGetRequest($platform_key, string $contentType = self::contentTypes['integrationsPlatformKeyBrandingGet'][0])
    {

        // verify the required parameter 'platform_key' is set
        if ($platform_key === null || (is_array($platform_key) && count($platform_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform_key when calling integrationsPlatformKeyBrandingGet'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9_]*$/", $platform_key)) {
            throw new \InvalidArgumentException("invalid value for \"platform_key\" when calling IntegrationsApi.integrationsPlatformKeyBrandingGet, must conform to the pattern /^[a-zA-Z0-9_]*$/.");
        }
        

        $resourcePath = '/integrations/{platformKey}/branding';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($platform_key !== null) {
            $resourcePath = str_replace(
                '{' . 'platformKey' . '}',
                ObjectSerializer::toPathValue($platform_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation integrationsPlatformKeyEnabledPut
     *
     * @param  string $platform_key platform_key (required)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsEnabledArgs $codat_public_api_models_platform_credentials_enabled_args codat_public_api_models_platform_credentials_enabled_args (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsPlatformKeyEnabledPut'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsPlatformSourceModel
     */
    public function integrationsPlatformKeyEnabledPut($platform_key, $codat_public_api_models_platform_credentials_enabled_args = null, string $contentType = self::contentTypes['integrationsPlatformKeyEnabledPut'][0])
    {
        list($response) = $this->integrationsPlatformKeyEnabledPutWithHttpInfo($platform_key, $codat_public_api_models_platform_credentials_enabled_args, $contentType);
        return $response;
    }

    /**
     * Operation integrationsPlatformKeyEnabledPutWithHttpInfo
     *
     * @param  string $platform_key (required)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsEnabledArgs $codat_public_api_models_platform_credentials_enabled_args (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsPlatformKeyEnabledPut'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsPlatformSourceModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function integrationsPlatformKeyEnabledPutWithHttpInfo($platform_key, $codat_public_api_models_platform_credentials_enabled_args = null, string $contentType = self::contentTypes['integrationsPlatformKeyEnabledPut'][0])
    {
        $request = $this->integrationsPlatformKeyEnabledPutRequest($platform_key, $codat_public_api_models_platform_credentials_enabled_args, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsPlatformSourceModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsPlatformSourceModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsPlatformSourceModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsPlatformSourceModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsPlatformSourceModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation integrationsPlatformKeyEnabledPutAsync
     *
     * @param  string $platform_key (required)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsEnabledArgs $codat_public_api_models_platform_credentials_enabled_args (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsPlatformKeyEnabledPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function integrationsPlatformKeyEnabledPutAsync($platform_key, $codat_public_api_models_platform_credentials_enabled_args = null, string $contentType = self::contentTypes['integrationsPlatformKeyEnabledPut'][0])
    {
        return $this->integrationsPlatformKeyEnabledPutAsyncWithHttpInfo($platform_key, $codat_public_api_models_platform_credentials_enabled_args, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation integrationsPlatformKeyEnabledPutAsyncWithHttpInfo
     *
     * @param  string $platform_key (required)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsEnabledArgs $codat_public_api_models_platform_credentials_enabled_args (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsPlatformKeyEnabledPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function integrationsPlatformKeyEnabledPutAsyncWithHttpInfo($platform_key, $codat_public_api_models_platform_credentials_enabled_args = null, string $contentType = self::contentTypes['integrationsPlatformKeyEnabledPut'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsPlatformSourceModel';
        $request = $this->integrationsPlatformKeyEnabledPutRequest($platform_key, $codat_public_api_models_platform_credentials_enabled_args, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'integrationsPlatformKeyEnabledPut'
     *
     * @param  string $platform_key (required)
     * @param  \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsEnabledArgs $codat_public_api_models_platform_credentials_enabled_args (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsPlatformKeyEnabledPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function integrationsPlatformKeyEnabledPutRequest($platform_key, $codat_public_api_models_platform_credentials_enabled_args = null, string $contentType = self::contentTypes['integrationsPlatformKeyEnabledPut'][0])
    {

        // verify the required parameter 'platform_key' is set
        if ($platform_key === null || (is_array($platform_key) && count($platform_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform_key when calling integrationsPlatformKeyEnabledPut'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9_]*$/", $platform_key)) {
            throw new \InvalidArgumentException("invalid value for \"platform_key\" when calling IntegrationsApi.integrationsPlatformKeyEnabledPut, must conform to the pattern /^[a-zA-Z0-9_]*$/.");
        }
        


        $resourcePath = '/integrations/{platformKey}/enabled';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($platform_key !== null) {
            $resourcePath = str_replace(
                '{' . 'platformKey' . '}',
                ObjectSerializer::toPathValue($platform_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($codat_public_api_models_platform_credentials_enabled_args)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($codat_public_api_models_platform_credentials_enabled_args));
            } else {
                $httpBody = $codat_public_api_models_platform_credentials_enabled_args;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation integrationsPlatformKeyGet
     *
     * @param  string $platform_key platform_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsPlatformKeyGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsPlatformSourceModel
     */
    public function integrationsPlatformKeyGet($platform_key, string $contentType = self::contentTypes['integrationsPlatformKeyGet'][0])
    {
        list($response) = $this->integrationsPlatformKeyGetWithHttpInfo($platform_key, $contentType);
        return $response;
    }

    /**
     * Operation integrationsPlatformKeyGetWithHttpInfo
     *
     * @param  string $platform_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsPlatformKeyGet'] to see the possible values for this operation
     *
     * @throws \TheLogicStudio\CodatPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsPlatformSourceModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function integrationsPlatformKeyGetWithHttpInfo($platform_key, string $contentType = self::contentTypes['integrationsPlatformKeyGet'][0])
    {
        $request = $this->integrationsPlatformKeyGetRequest($platform_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsPlatformSourceModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsPlatformSourceModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsPlatformSourceModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsPlatformSourceModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsPlatformSourceModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation integrationsPlatformKeyGetAsync
     *
     * @param  string $platform_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsPlatformKeyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function integrationsPlatformKeyGetAsync($platform_key, string $contentType = self::contentTypes['integrationsPlatformKeyGet'][0])
    {
        return $this->integrationsPlatformKeyGetAsyncWithHttpInfo($platform_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation integrationsPlatformKeyGetAsyncWithHttpInfo
     *
     * @param  string $platform_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsPlatformKeyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function integrationsPlatformKeyGetAsyncWithHttpInfo($platform_key, string $contentType = self::contentTypes['integrationsPlatformKeyGet'][0])
    {
        $returnType = '\TheLogicStudio\CodatPHP\Model\CodatPublicApiModelsPlatformCredentialsPlatformSourceModel';
        $request = $this->integrationsPlatformKeyGetRequest($platform_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'integrationsPlatformKeyGet'
     *
     * @param  string $platform_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['integrationsPlatformKeyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function integrationsPlatformKeyGetRequest($platform_key, string $contentType = self::contentTypes['integrationsPlatformKeyGet'][0])
    {

        // verify the required parameter 'platform_key' is set
        if ($platform_key === null || (is_array($platform_key) && count($platform_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform_key when calling integrationsPlatformKeyGet'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9_]*$/", $platform_key)) {
            throw new \InvalidArgumentException("invalid value for \"platform_key\" when calling IntegrationsApi.integrationsPlatformKeyGet, must conform to the pattern /^[a-zA-Z0-9_]*$/.");
        }
        

        $resourcePath = '/integrations/{platformKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($platform_key !== null) {
            $resourcePath = str_replace(
                '{' . 'platformKey' . '}',
                ObjectSerializer::toPathValue($platform_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
